{
  "address": "0x00ff66600b35428b8eb76dc622d404c7ac27a99f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_auctionManager",
          "type": "address"
        }
      ],
      "name": "AuctionManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BadDebtDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_lastResortLiquidation",
          "type": "address"
        }
      ],
      "name": "LastResortLiquidationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vaultFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SeizedCollateralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_stabilityPool",
          "type": "address"
        }
      ],
      "name": "StabilityPoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vaultFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        }
      ],
      "name": "UnderWaterDebtAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vaultFactory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        }
      ],
      "name": "UnderWaterDebtRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vaultFactory",
          "type": "address"
        }
      ],
      "name": "VaultFactoryUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addSeizedCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addUnderWaterDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "collateralAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collaterals",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "containsCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "distributeBadDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastResortLiquidation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auctionManager",
          "type": "address"
        }
      ],
      "name": "setAuctionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lastResortLiquidation",
          "type": "address"
        }
      ],
      "name": "setLastResortLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stabilityPool",
          "type": "address"
        }
      ],
      "name": "setStabilityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultFactory",
          "type": "address"
        }
      ],
      "name": "setVaultFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tryLiquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underWaterDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLiquidatedCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd1cc7095c6fd3e24b66fe1af352e496dfadac59cf534f5ef0a82348109eb31a4",
  "receipt": {
    "to": null,
    "from": "0x109861a2a539ddb151ee591588a14cf86309e4e5",
    "contractAddress": "0x00ff66600b35428b8eb76dc622d404c7ac27a99f",
    "transactionIndex": "0xcf",
    "gasUsed": "0x16df28",
    "logsBloom": "0x
    "blockHash": "0xb03e60ed276723b464bbb597009c2328a1d4afb319bdabbc959ffe339c51a02f",
    "transactionHash": "0xd1cc7095c6fd3e24b66fe1af352e496dfadac59cf534f5ef0a82348109eb31a4",
    "logs": [
      {
        "transactionHash": "0xd1cc7095c6fd3e24b66fe1af352e496dfadac59cf534f5ef0a82348109eb31a4",
        "address": "0x00ff66600b35428b8eb76dc622d404c7ac27a99f",
        "blockHash": "0xb03e60ed276723b464bbb597009c2328a1d4afb319bdabbc959ffe339c51a02f",
        "blockNumber": "0x2f29a90",
        "data": "0x",
        "logIndex": "0x576",
        "removed": false,
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000109861a2a539ddb151ee591588a14cf86309e4e5"
        ],
        "transactionIndex": "0xcf"
      },
      {
        "transactionHash": "0xd1cc7095c6fd3e24b66fe1af352e496dfadac59cf534f5ef0a82348109eb31a4",
        "address": "0x0000000000000000000000000000000000001010",
        "blockHash": "0xb03e60ed276723b464bbb597009c2328a1d4afb319bdabbc959ffe339c51a02f",
        "blockNumber": "0x2f29a90",
        "data": "0x000000000000000000000000000000000000000000000000007ea9eb828ad6f80000000000000000000000000000000000000000000000048e0d5d7b7b11397000000000000000000000000000000000000000000000000caf8e8342f836cd040000000000000000000000000000000000000000000000048d8eb38ff886627800000000000000000000000000000000000000000000000cb00d2d2e7ac1a3fc",
        "logIndex": "0x577",
        "removed": false,
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000109861a2a539ddb151ee591588a14cf86309e4e5",
          "0x00000000000000000000000090b11143a0cb64e067402307bc7f2276dcec8250"
        ],
        "transactionIndex": "0xcf"
      }
    ],
    "blockNumber": "0x2f29a90",
    "cumulativeGasUsed": "0x18e878b",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3d7ac3cd8c655c7d05e6510673d0ef5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_auctionManager\",\"type\":\"address\"}],\"name\":\"AuctionManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BadDebtDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lastResortLiquidation\",\"type\":\"address\"}],\"name\":\"LastResortLiquidationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SeizedCollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stabilityPool\",\"type\":\"address\"}],\"name\":\"StabilityPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"name\":\"UnderWaterDebtAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"name\":\"UnderWaterDebtRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"}],\"name\":\"VaultFactoryUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addSeizedCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addUnderWaterDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"collateralAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collaterals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"containsCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeBadDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastResortLiquidation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auctionManager\",\"type\":\"address\"}],\"name\":\"setAuctionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lastResortLiquidation\",\"type\":\"address\"}],\"name\":\"setLastResortLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stabilityPool\",\"type\":\"address\"}],\"name\":\"setStabilityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"}],\"name\":\"setVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryLiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underWaterDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidatedCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidationRouter.sol\":\"LiquidationRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/LiquidationRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IVaultFactory.sol\\\";\\nimport \\\"./interfaces/IStabilityPool.sol\\\";\\nimport \\\"./interfaces/IAuctionManager.sol\\\";\\n\\ncontract LiquidationRouter is Ownable, ReentrancyGuard {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    using SafeERC20 for IERC20;\\n    event SeizedCollateralAdded(\\n        address indexed collateral,\\n        address indexed _vaultFactory,\\n        address indexed _vault,\\n        uint256 amount\\n    );\\n    event UnderWaterDebtAdded(address indexed _vaultFactory, address indexed _vault, uint256 debtAmount);\\n    event UnderWaterDebtRemoved(address indexed _vaultFactory, uint256 debtAmount);\\n    event VaultFactoryUpdated(address indexed _vaultFactory);\\n    event StabilityPoolUpdated(address indexed _stabilityPool);\\n    event AuctionManagerUpdated(address indexed _auctionManager);\\n    event LastResortLiquidationUpdated(address indexed _lastResortLiquidation);\\n    event BadDebtDistributed(address indexed _vault, uint256 amount);\\n\\n    uint256 public underWaterDebt;\\n\\n    address public vaultFactory;\\n    address public stabilityPool;\\n    address public auctionManager;\\n    address public lastResortLiquidation;\\n\\n    EnumerableSet.AddressSet private collateralSet;\\n\\n    mapping(address => uint256) public collateral;\\n\\n    function setLastResortLiquidation(address _lastResortLiquidation) external onlyOwner {\\n        require(_lastResortLiquidation != address(0x0), \\\"last-resort-liquidation-is-0\\\");\\n        lastResortLiquidation = _lastResortLiquidation;\\n        emit LastResortLiquidationUpdated(_lastResortLiquidation);\\n    }\\n\\n    function setStabilityPool(address _stabilityPool) external onlyOwner {\\n        require(_stabilityPool != address(0x0), \\\"stability-pool-is-0\\\");\\n        stabilityPool = _stabilityPool;\\n        emit StabilityPoolUpdated(_stabilityPool);\\n    }\\n\\n    function setAuctionManager(address _auctionManager) external onlyOwner {\\n        require(_auctionManager != address(0x0), \\\"auction-manager-is-0\\\");\\n        auctionManager = _auctionManager;\\n        emit AuctionManagerUpdated(_auctionManager);\\n    }\\n\\n    modifier onlyVault() {\\n        require(IVaultFactory(vaultFactory).containsVault(msg.sender), \\\"not-a-vault\\\");\\n        _;\\n    }\\n\\n    modifier onlyAllowed() {\\n        require(msg.sender == stabilityPool, \\\"not-allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyLastResortLiquidation() {\\n        require(msg.sender == lastResortLiquidation, \\\"not-last-resort-liquidation\\\");\\n        _;\\n    }\\n\\n    function containsCollateral(address _collateral) external view returns (bool) {\\n        return collateralSet.contains(_collateral);\\n    }\\n\\n    function collateralsLength() external view returns (uint256) {\\n        return collateralSet.length();\\n    }\\n\\n    function collateralAt(uint256 _index) external view returns (address) {\\n        return collateralSet.at(_index);\\n    }\\n\\n    function collaterals() external view returns (address[] memory) {\\n        address[] memory _collaterals = new address[](collateralSet.length());\\n        for (uint256 i = 0; i < collateralSet.length(); i++) {\\n            _collaterals[i] = collateralSet.at(i);\\n        }\\n        return _collaterals;\\n    }\\n\\n    function setVaultFactory(address _vaultFactory) external onlyOwner {\\n        require(_vaultFactory != address(0x0), \\\"vault-factory-is-0\\\");\\n        require(IVaultFactory(_vaultFactory).liquidationRouter() == address(this), \\\"wrong-liquidation-router\\\");\\n        vaultFactory = _vaultFactory;\\n        emit VaultFactoryUpdated(_vaultFactory);\\n    }\\n\\n    function addSeizedCollateral(address _collateral, uint256 _amount) external onlyVault {\\n        IERC20(_collateral).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        IERC20(_collateral).safeApprove(stabilityPool, 0);\\n        IERC20(_collateral).safeApprove(stabilityPool, type(uint256).max);\\n\\n        IERC20(_collateral).safeApprove(auctionManager, 0);\\n        IERC20(_collateral).safeApprove(auctionManager, type(uint256).max);\\n\\n        collateralSet.add(_collateral);\\n        collateral[_collateral] += _amount;\\n        emit SeizedCollateralAdded(_collateral, vaultFactory, msg.sender, _amount);\\n    }\\n\\n    function addUnderWaterDebt(address _vault, uint256 _amount) external onlyVault {\\n        underWaterDebt += _amount;\\n        emit UnderWaterDebtAdded(vaultFactory, _vault, _amount);\\n    }\\n\\n    function _removeUnderWaterDebt(uint256 _amount) internal {\\n        underWaterDebt -= _amount;\\n        emit UnderWaterDebtRemoved(vaultFactory, _amount);\\n    }\\n\\n    function withdrawLiquidatedCollateral(address _collateral, address _to, uint256 _amount) external onlyOwner {\\n        IERC20(_collateral).safeTransfer(_to, _amount);\\n        collateral[_collateral] -= _amount;\\n        if (collateral[_collateral] == 0) {\\n            collateralSet.remove(_collateral);\\n        }\\n    }\\n\\n    function _removeAllCollaterals() internal {\\n        uint256 _length = collateralSet.length();\\n        for (uint256 i; i < _length; i++) {\\n            address _collateral = collateralSet.at(i);\\n            collateral[_collateral] = 0;\\n        }\\n    }\\n\\n    function tryLiquidate() external nonReentrant {\\n        require(underWaterDebt > 0, \\\"no-underwater-debt\\\");\\n        uint256 _stabilityPoolDeposit = IStabilityPool(stabilityPool).totalDeposit();\\n        if (_stabilityPoolDeposit >= underWaterDebt) {\\n            IStabilityPool(stabilityPool).liquidate();\\n        } else {\\n            IAuctionManager(auctionManager).newAuction();\\n        }\\n        _removeAllCollaterals();\\n        _removeUnderWaterDebt(underWaterDebt);\\n    }\\n\\n    function distributeBadDebt(address _vault, uint256 _amount) external onlyLastResortLiquidation {\\n        IVaultFactory(vaultFactory).distributeBadDebt(_vault, _amount);\\n        emit BadDebtDistributed(_vault, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7047baa43f768d8753552546ddd01076f154bf6c74c2714d29abf7c3648df721\",\"license\":\"MIT\"},\"contracts/interfaces/IAuctionManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IAuctionManager {\\n  function newAuction() external;\\n}\\n\",\"keccak256\":\"0xba5ff3d06e4f211f21579666f4601165e9ae5e546ee2542c4887d94dd53bfce6\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IStabilityPool {\\n    function liquidate() external;\\n\\n    function totalDeposit() external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function a3aToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9c5e339807fd163198797ab0ea795e42653ff413000ffba19e500049c6c2bfb4\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IVault {\\n    function vaultOwner() external view returns (address);\\n    function debt() external view returns (uint256);\\n    function transferVaultOwnership(address _newOwner) external;\\n    function setName(string memory _name) external;\\n    function containsCollateral(address _collateral) external view returns (bool);\\n    function collateralsLength() external view returns (uint256);\\n    function collateralAt(uint256 _index) external view returns (address);\\n    function collaterals() external view returns (address[] memory);\\n    function collateral(address _collateral) external view returns (uint256);\\n    function factory() external view returns (address);\\n    function addCollateral(address _collateral, uint256 _amount) external;\\n    function removeCollateral(address _collateral, uint256 _amount, address _to) external;\\n    function addBadDebt(uint256 _amount) external;\\n    function borrowable() external view returns (uint256 _maxBorrowable, uint256 _borrowable);\\n    function borrow(uint256 _amount) external;\\n    function repay(uint256 _amount) external;\\n    function calcRedeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    ) external view returns (uint256 _stableAmountNeeded, uint256 _redemptionFee);\\n    function redeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    ) external returns (uint256 _debtRepaid, uint256 _feeCollected);\\n    function healthFactor(bool _useMlr) external view returns (uint256 _healthFactor);\\n    function newHealthFactor(uint256 _newDebt, bool _useMlr) external view returns (uint256 _newHealthFactor);\\n    function borrowableWithDiff(\\n        address _collateral,\\n        uint256 _diffAmount,\\n        bool _isAdd,\\n        bool _useMlr\\n    ) external view returns (uint256 _maxBorrowable, uint256 _borrowable);\\n    function liquidate() external returns (uint256 _forgivenDebt);\\n}\\n\",\"keccak256\":\"0xa681d2b7702fd9f9d220951d8696859bf9f0c2df80ee3f286857d2bdaddc97e6\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IVaultFactory {\\n    event NewVault(address indexed vault, string name, address indexed owner);\\n    event PriceFeedUpdated(address indexed priceFeed);\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function vaultCount() external view returns (uint256);\\n    function lastVault() external view returns (address);\\n    function firstVault() external view returns (address);\\n    function nextVault(address _vault) external view returns (address);\\n    function prevVault(address _vault) external view returns (address);\\n    function liquidationRouter() external view returns (address);\\n    function MAX_TOKENS_PER_VAULT() external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function transferVaultOwnership(address _vault, address _newOwner) external;\\n    function createVault(string memory _name) external returns (address);\\n    function addCollateralNative(address _vault) external payable;\\n    function removeCollateralNative(address _vault, uint256 _amount, address _to) external;\\n    function addCollateral(address _vault, address _collateral, uint256 _amount) external;\\n    function removeCollateral(address _vault, address _collateral, uint256 _amount, address _to) external;\\n    function borrow(address _vault, uint256 _amount, address _to) external;\\n    function distributeBadDebt(address _vault, uint256 _amount) external;\\n    function closeVault(address _vault) external;\\n    function repay(address _vault, uint256 _amount) external;\\n    function redeem(address _vault, address _collateral, uint256 _collateralAmount, address _to) external;\\n    function liquidate(address _vault) external;\\n    function isLiquidatable(address _vault) external view returns (bool);\\n    function isReedemable(address _vault, address _collateral) external view returns (bool);\\n    function containsVault(address _vault) external view returns (bool);\\n    function stable() external view returns (address);\\n    function isCollateralSupported(address _collateral) external view returns (bool);\\n    function vaultsByOwnerLength(address _owner) external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x2d7245f166e18b43f804a62264391432008a204d43920f6ac000fb41657f169b\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a33610023565b60018055610073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61195e806100826000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806395e4cacb116100d8578063b7017b911161008c578063dd1c9f5411610066578063dd1c9f541461030f578063edeb1c8e14610322578063f2fde38b1461033557600080fd5b8063b7017b91146102d6578063d1400f68146102e9578063d8a06f73146102fc57600080fd5b8063a0c03a36116100bd578063a0c03a361461029b578063a5fdc5de146102a3578063b0192f9a146102c357600080fd5b806395e4cacb1461027557806398d721e01461028857600080fd5b80633ea7fbdb1161013a5780635f1bf01b116101145780635f1bf01b14610249578063715018a61461025c5780638da5cb5b1461026457600080fd5b80633ea7fbdb146101fe5780634113e5ca146102115780634bfc894d1461022657600080fd5b806323d8d8b91161016b57806323d8d8b9146101ca57806329ad2fb2146101e15780632fb04272146101e957600080fd5b8063048c661d146101875780631f665646146101b7575b600080fd5b60045461019a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61019a6101c53660046116c1565b610348565b6101d360025481565b6040519081526020016101ae565b6101d361035b565b6101fc6101f73660046116ef565b61036c565b005b6101fc61020c36600461171b565b610476565b6102196105e0565b6040516101ae9190611738565b61023961023436600461171b565b610693565b60405190151581526020016101ae565b6101fc61025736600461171b565b6106a0565b6101fc610748565b6000546001600160a01b031661019a565b6101fc61028336600461171b565b61075c565b6101fc61029636600461171b565b610804565b6101fc6108ac565b6101d36102b136600461171b565b60096020526000908152604090205481565b60055461019a906001600160a01b031681565b6101fc6102e43660046116ef565b610a89565b6101fc6102f73660046116ef565b610c37565b60035461019a906001600160a01b031681565b6101fc61031d366004611785565b610d57565b60065461019a906001600160a01b031681565b6101fc61034336600461171b565b610dd1565b6000610355600783610e61565b92915050565b60006103676007610e74565b905090565b60035460405163020e64db60e61b81523360048201526001600160a01b039091169063839936c090602401602060405180830381865afa1580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d891906117c6565b6104175760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd0b584b5d985d5b1d60aa1b60448201526064015b60405180910390fd5b806002600082825461042991906117fe565b90915550506003546040518281526001600160a01b038481169216907facb6f54789f5e306486ba115f373acdd6aab8afb10a8717db164c8af38d9c27b9060200160405180910390a35050565b61047e610e7e565b6001600160a01b0381166104d45760405162461bcd60e51b815260206004820152601260248201527f7661756c742d666163746f72792d69732d300000000000000000000000000000604482015260640161040e565b306001600160a01b0316816001600160a01b031663679fda706040518163ffffffff1660e01b8152600401602060405180830381865afa15801561051c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105409190611811565b6001600160a01b0316146105965760405162461bcd60e51b815260206004820152601860248201527f77726f6e672d6c69717569646174696f6e2d726f757465720000000000000000604482015260640161040e565b600380546001600160a01b0319166001600160a01b0383169081179091556040517f4618618bd25d53d81b13f8ebde476031681bbb9f5b409de00b6bca9656f96f4790600090a250565b606060006105ee6007610e74565b67ffffffffffffffff8111156106065761060661182e565b60405190808252806020026020018201604052801561062f578160200160208202803683370190505b50905060005b61063f6007610e74565b81101561068d57610651600782610e61565b82828151811061066357610663611844565b6001600160a01b0390921660209283029190910190910152806106858161185a565b915050610635565b50919050565b6000610355600783610ed8565b6106a8610e7e565b6001600160a01b0381166106fe5760405162461bcd60e51b815260206004820152601c60248201527f6c6173742d7265736f72742d6c69717569646174696f6e2d69732d3000000000604482015260640161040e565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f7609199bf1997ec0f8a36fbd539d788f36b2069b47a48919303b9658633ff7a590600090a250565b610750610e7e565b61075a6000610efa565b565b610764610e7e565b6001600160a01b0381166107ba5760405162461bcd60e51b815260206004820152601460248201527f61756374696f6e2d6d616e616765722d69732d30000000000000000000000000604482015260640161040e565b600580546001600160a01b0319166001600160a01b0383169081179091556040517f9fa2b6607d54dc4a0fc0e840407365d82db1c9dd7ecd102b8a7ac6290444675e90600090a250565b61080c610e7e565b6001600160a01b0381166108625760405162461bcd60e51b815260206004820152601360248201527f73746162696c6974792d706f6f6c2d69732d3000000000000000000000000000604482015260640161040e565b600480546001600160a01b0319166001600160a01b0383169081179091556040517fa360b6a43cb1d8db2fe62bed1ebc63d7ec94d4875e4b19b022d06340db98987390600090a250565b6108b4610f4a565b6000600254116109065760405162461bcd60e51b815260206004820152601260248201527f6e6f2d756e64657277617465722d646562740000000000000000000000000000604482015260640161040e565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663f6153ccd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f9190611873565b90506002548110610a035760048054604080517f28a0702500000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216926328a0702592828201926000929082900301818387803b1580156109e657600080fd5b505af11580156109fa573d6000803e3d6000fd5b50505050610a6c565b600560009054906101000a90046001600160a01b03166001600160a01b03166398afd5836040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a5357600080fd5b505af1158015610a67573d6000803e3d6000fd5b505050505b610a74610fa3565b610a7f600254610ff8565b5061075a60018055565b60035460405163020e64db60e61b81523360048201526001600160a01b039091169063839936c090602401602060405180830381865afa158015610ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af591906117c6565b610b2f5760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd0b584b5d985d5b1d60aa1b604482015260640161040e565b610b446001600160a01b038316333084611054565b600454610b5f906001600160a01b0384811691166000611105565b600454610b7b906001600160a01b038481169116600019611105565b600554610b96906001600160a01b0384811691166000611105565b600554610bb2906001600160a01b038481169116600019611105565b610bbd600783611253565b506001600160a01b03821660009081526009602052604081208054839290610be69084906117fe565b909155505060035460405182815233916001600160a01b0390811691908516907f3503c0ce8b4f88d1482dce1f992d14582b99e2b80d6664483eb03886524a09739060200160405180910390a45050565b6006546001600160a01b03163314610c915760405162461bcd60e51b815260206004820152601b60248201527f6e6f742d6c6173742d7265736f72742d6c69717569646174696f6e0000000000604482015260640161040e565b6003546040517fd1400f680000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490529091169063d1400f6890604401600060405180830381600087803b158015610cf857600080fd5b505af1158015610d0c573d6000803e3d6000fd5b50505050816001600160a01b03167f1f147b88491987990bbad74c1116276498d16e9115087a05b8b9ee1caaad3bec82604051610d4b91815260200190565b60405180910390a25050565b610d5f610e7e565b610d736001600160a01b0384168383611268565b6001600160a01b03831660009081526009602052604081208054839290610d9b90849061188c565b90915550506001600160a01b0383166000908152600960205260408120549003610dcc57610dca6007846112b1565b505b505050565b610dd9610e7e565b6001600160a01b038116610e555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161040e565b610e5e81610efa565b50565b6000610e6d83836112c6565b9392505050565b6000610355825490565b6000546001600160a01b0316331461075a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161040e565b6001600160a01b03811660009081526001830160205260408120541515610e6d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015403610f9c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161040e565b6002600155565b6000610faf6007610e74565b905060005b81811015610ff4576000610fc9600783610e61565b6001600160a01b03166000908152600960205260408120555080610fec8161185a565b915050610fb4565b5050565b806002600082825461100a919061188c565b90915550506003546040518281526001600160a01b03909116907f0d2ab37334406a05a85d41fbec9cae970464294edb7fc171ae033e5a18794dc49060200160405180910390a250565b6040516001600160a01b0380851660248301528316604482015260648101829052610dca9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526112f0565b80158061119857506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111969190611873565b155b61120a5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161040e565b6040516001600160a01b038316602482015260448101829052610dcc9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064016110a1565b6000610e6d836001600160a01b0384166113d8565b6040516001600160a01b038316602482015260448101829052610dcc9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016110a1565b6000610e6d836001600160a01b038416611427565b60008260000182815481106112dd576112dd611844565b9060005260206000200154905092915050565b6000611345826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661151a9092919063ffffffff16565b905080516000148061136657508080602001905181019061136691906117c6565b610dcc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161040e565b600081815260018301602052604081205461141f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610355565b506000610355565b6000818152600183016020526040812054801561151057600061144b60018361188c565b855490915060009061145f9060019061188c565b90508181146114c457600086600001828154811061147f5761147f611844565b90600052602060002001549050808760000184815481106114a2576114a2611844565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806114d5576114d561189f565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610355565b6000915050610355565b60606115298484600085611531565b949350505050565b6060824710156115a95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161040e565b600080866001600160a01b031685876040516115c591906118d9565b60006040518083038185875af1925050503d8060008114611602576040519150601f19603f3d011682016040523d82523d6000602084013e611607565b606091505b509150915061161887838387611623565b979650505050505050565b6060831561169257825160000361168b576001600160a01b0385163b61168b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161040e565b5081611529565b61152983838151156116a75781518083602001fd5b8060405162461bcd60e51b815260040161040e91906118f5565b6000602082840312156116d357600080fd5b5035919050565b6001600160a01b0381168114610e5e57600080fd5b6000806040838503121561170257600080fd5b823561170d816116da565b946020939093013593505050565b60006020828403121561172d57600080fd5b8135610e6d816116da565b6020808252825182820181905260009190848201906040850190845b818110156117795783516001600160a01b031683529284019291840191600101611754565b50909695505050505050565b60008060006060848603121561179a57600080fd5b83356117a5816116da565b925060208401356117b5816116da565b929592945050506040919091013590565b6000602082840312156117d857600080fd5b81518015158114610e6d57600080fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610355576103556117e8565b60006020828403121561182357600080fd5b8151610e6d816116da565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006001820161186c5761186c6117e8565b5060010190565b60006020828403121561188557600080fd5b5051919050565b81810381811115610355576103556117e8565b634e487b7160e01b600052603160045260246000fd5b60005b838110156118d05781810151838201526020016118b8565b50506000910152565b600082516118eb8184602087016118b5565b9190910192915050565b60208152600082518060208401526119148160408501602087016118b5565b601f01601f1916919091016040019291505056fea2646970667358221220557ec2ea6ed6695caa17f1ffdc1c960f18b2891ed2639fe6f688e04a717c67fb64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c806395e4cacb116100d8578063b7017b911161008c578063dd1c9f5411610066578063dd1c9f541461030f578063edeb1c8e14610322578063f2fde38b1461033557600080fd5b8063b7017b91146102d6578063d1400f68146102e9578063d8a06f73146102fc57600080fd5b8063a0c03a36116100bd578063a0c03a361461029b578063a5fdc5de146102a3578063b0192f9a146102c357600080fd5b806395e4cacb1461027557806398d721e01461028857600080fd5b80633ea7fbdb1161013a5780635f1bf01b116101145780635f1bf01b14610249578063715018a61461025c5780638da5cb5b1461026457600080fd5b80633ea7fbdb146101fe5780634113e5ca146102115780634bfc894d1461022657600080fd5b806323d8d8b91161016b57806323d8d8b9146101ca57806329ad2fb2146101e15780632fb04272146101e957600080fd5b8063048c661d146101875780631f665646146101b7575b600080fd5b60045461019a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61019a6101c53660046116c1565b610348565b6101d360025481565b6040519081526020016101ae565b6101d361035b565b6101fc6101f73660046116ef565b61036c565b005b6101fc61020c36600461171b565b610476565b6102196105e0565b6040516101ae9190611738565b61023961023436600461171b565b610693565b60405190151581526020016101ae565b6101fc61025736600461171b565b6106a0565b6101fc610748565b6000546001600160a01b031661019a565b6101fc61028336600461171b565b61075c565b6101fc61029636600461171b565b610804565b6101fc6108ac565b6101d36102b136600461171b565b60096020526000908152604090205481565b60055461019a906001600160a01b031681565b6101fc6102e43660046116ef565b610a89565b6101fc6102f73660046116ef565b610c37565b60035461019a906001600160a01b031681565b6101fc61031d366004611785565b610d57565b60065461019a906001600160a01b031681565b6101fc61034336600461171b565b610dd1565b6000610355600783610e61565b92915050565b60006103676007610e74565b905090565b60035460405163020e64db60e61b81523360048201526001600160a01b039091169063839936c090602401602060405180830381865afa1580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d891906117c6565b6104175760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd0b584b5d985d5b1d60aa1b60448201526064015b60405180910390fd5b806002600082825461042991906117fe565b90915550506003546040518281526001600160a01b038481169216907facb6f54789f5e306486ba115f373acdd6aab8afb10a8717db164c8af38d9c27b9060200160405180910390a35050565b61047e610e7e565b6001600160a01b0381166104d45760405162461bcd60e51b815260206004820152601260248201527f7661756c742d666163746f72792d69732d300000000000000000000000000000604482015260640161040e565b306001600160a01b0316816001600160a01b031663679fda706040518163ffffffff1660e01b8152600401602060405180830381865afa15801561051c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105409190611811565b6001600160a01b0316146105965760405162461bcd60e51b815260206004820152601860248201527f77726f6e672d6c69717569646174696f6e2d726f757465720000000000000000604482015260640161040e565b600380546001600160a01b0319166001600160a01b0383169081179091556040517f4618618bd25d53d81b13f8ebde476031681bbb9f5b409de00b6bca9656f96f4790600090a250565b606060006105ee6007610e74565b67ffffffffffffffff8111156106065761060661182e565b60405190808252806020026020018201604052801561062f578160200160208202803683370190505b50905060005b61063f6007610e74565b81101561068d57610651600782610e61565b82828151811061066357610663611844565b6001600160a01b0390921660209283029190910190910152806106858161185a565b915050610635565b50919050565b6000610355600783610ed8565b6106a8610e7e565b6001600160a01b0381166106fe5760405162461bcd60e51b815260206004820152601c60248201527f6c6173742d7265736f72742d6c69717569646174696f6e2d69732d3000000000604482015260640161040e565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f7609199bf1997ec0f8a36fbd539d788f36b2069b47a48919303b9658633ff7a590600090a250565b610750610e7e565b61075a6000610efa565b565b610764610e7e565b6001600160a01b0381166107ba5760405162461bcd60e51b815260206004820152601460248201527f61756374696f6e2d6d616e616765722d69732d30000000000000000000000000604482015260640161040e565b600580546001600160a01b0319166001600160a01b0383169081179091556040517f9fa2b6607d54dc4a0fc0e840407365d82db1c9dd7ecd102b8a7ac6290444675e90600090a250565b61080c610e7e565b6001600160a01b0381166108625760405162461bcd60e51b815260206004820152601360248201527f73746162696c6974792d706f6f6c2d69732d3000000000000000000000000000604482015260640161040e565b600480546001600160a01b0319166001600160a01b0383169081179091556040517fa360b6a43cb1d8db2fe62bed1ebc63d7ec94d4875e4b19b022d06340db98987390600090a250565b6108b4610f4a565b6000600254116109065760405162461bcd60e51b815260206004820152601260248201527f6e6f2d756e64657277617465722d646562740000000000000000000000000000604482015260640161040e565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663f6153ccd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f9190611873565b90506002548110610a035760048054604080517f28a0702500000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216926328a0702592828201926000929082900301818387803b1580156109e657600080fd5b505af11580156109fa573d6000803e3d6000fd5b50505050610a6c565b600560009054906101000a90046001600160a01b03166001600160a01b03166398afd5836040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a5357600080fd5b505af1158015610a67573d6000803e3d6000fd5b505050505b610a74610fa3565b610a7f600254610ff8565b5061075a60018055565b60035460405163020e64db60e61b81523360048201526001600160a01b039091169063839936c090602401602060405180830381865afa158015610ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af591906117c6565b610b2f5760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd0b584b5d985d5b1d60aa1b604482015260640161040e565b610b446001600160a01b038316333084611054565b600454610b5f906001600160a01b0384811691166000611105565b600454610b7b906001600160a01b038481169116600019611105565b600554610b96906001600160a01b0384811691166000611105565b600554610bb2906001600160a01b038481169116600019611105565b610bbd600783611253565b506001600160a01b03821660009081526009602052604081208054839290610be69084906117fe565b909155505060035460405182815233916001600160a01b0390811691908516907f3503c0ce8b4f88d1482dce1f992d14582b99e2b80d6664483eb03886524a09739060200160405180910390a45050565b6006546001600160a01b03163314610c915760405162461bcd60e51b815260206004820152601b60248201527f6e6f742d6c6173742d7265736f72742d6c69717569646174696f6e0000000000604482015260640161040e565b6003546040517fd1400f680000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490529091169063d1400f6890604401600060405180830381600087803b158015610cf857600080fd5b505af1158015610d0c573d6000803e3d6000fd5b50505050816001600160a01b03167f1f147b88491987990bbad74c1116276498d16e9115087a05b8b9ee1caaad3bec82604051610d4b91815260200190565b60405180910390a25050565b610d5f610e7e565b610d736001600160a01b0384168383611268565b6001600160a01b03831660009081526009602052604081208054839290610d9b90849061188c565b90915550506001600160a01b0383166000908152600960205260408120549003610dcc57610dca6007846112b1565b505b505050565b610dd9610e7e565b6001600160a01b038116610e555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161040e565b610e5e81610efa565b50565b6000610e6d83836112c6565b9392505050565b6000610355825490565b6000546001600160a01b0316331461075a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161040e565b6001600160a01b03811660009081526001830160205260408120541515610e6d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015403610f9c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161040e565b6002600155565b6000610faf6007610e74565b905060005b81811015610ff4576000610fc9600783610e61565b6001600160a01b03166000908152600960205260408120555080610fec8161185a565b915050610fb4565b5050565b806002600082825461100a919061188c565b90915550506003546040518281526001600160a01b03909116907f0d2ab37334406a05a85d41fbec9cae970464294edb7fc171ae033e5a18794dc49060200160405180910390a250565b6040516001600160a01b0380851660248301528316604482015260648101829052610dca9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526112f0565b80158061119857506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111969190611873565b155b61120a5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161040e565b6040516001600160a01b038316602482015260448101829052610dcc9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064016110a1565b6000610e6d836001600160a01b0384166113d8565b6040516001600160a01b038316602482015260448101829052610dcc9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016110a1565b6000610e6d836001600160a01b038416611427565b60008260000182815481106112dd576112dd611844565b9060005260206000200154905092915050565b6000611345826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661151a9092919063ffffffff16565b905080516000148061136657508080602001905181019061136691906117c6565b610dcc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161040e565b600081815260018301602052604081205461141f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610355565b506000610355565b6000818152600183016020526040812054801561151057600061144b60018361188c565b855490915060009061145f9060019061188c565b90508181146114c457600086600001828154811061147f5761147f611844565b90600052602060002001549050808760000184815481106114a2576114a2611844565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806114d5576114d561189f565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610355565b6000915050610355565b60606115298484600085611531565b949350505050565b6060824710156115a95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161040e565b600080866001600160a01b031685876040516115c591906118d9565b60006040518083038185875af1925050503d8060008114611602576040519150601f19603f3d011682016040523d82523d6000602084013e611607565b606091505b509150915061161887838387611623565b979650505050505050565b6060831561169257825160000361168b576001600160a01b0385163b61168b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161040e565b5081611529565b61152983838151156116a75781518083602001fd5b8060405162461bcd60e51b815260040161040e91906118f5565b6000602082840312156116d357600080fd5b5035919050565b6001600160a01b0381168114610e5e57600080fd5b6000806040838503121561170257600080fd5b823561170d816116da565b946020939093013593505050565b60006020828403121561172d57600080fd5b8135610e6d816116da565b6020808252825182820181905260009190848201906040850190845b818110156117795783516001600160a01b031683529284019291840191600101611754565b50909695505050505050565b60008060006060848603121561179a57600080fd5b83356117a5816116da565b925060208401356117b5816116da565b929592945050506040919091013590565b6000602082840312156117d857600080fd5b81518015158114610e6d57600080fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610355576103556117e8565b60006020828403121561182357600080fd5b8151610e6d816116da565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006001820161186c5761186c6117e8565b5060010190565b60006020828403121561188557600080fd5b5051919050565b81810381811115610355576103556117e8565b634e487b7160e01b600052603160045260246000fd5b60005b838110156118d05781810151838201526020016118b8565b50506000910152565b600082516118eb8184602087016118b5565b9190910192915050565b60208152600082518060208401526119148160408501602087016118b5565b601f01601f1916919091016040019291505056fea2646970667358221220557ec2ea6ed6695caa17f1ffdc1c960f18b2891ed2639fe6f688e04a717c67fb64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 110,
        "contract": "contracts/LiquidationRouter.sol:LiquidationRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 229,
        "contract": "contracts/LiquidationRouter.sol:LiquidationRouter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4494,
        "contract": "contracts/LiquidationRouter.sol:LiquidationRouter",
        "label": "underWaterDebt",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4496,
        "contract": "contracts/LiquidationRouter.sol:LiquidationRouter",
        "label": "vaultFactory",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4498,
        "contract": "contracts/LiquidationRouter.sol:LiquidationRouter",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4500,
        "contract": "contracts/LiquidationRouter.sol:LiquidationRouter",
        "label": "auctionManager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4502,
        "contract": "contracts/LiquidationRouter.sol:LiquidationRouter",
        "label": "lastResortLiquidation",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4505,
        "contract": "contracts/LiquidationRouter.sol:LiquidationRouter",
        "label": "collateralSet",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(AddressSet)2063_storage"
      },
      {
        "astId": 4509,
        "contract": "contracts/LiquidationRouter.sol:LiquidationRouter",
        "label": "collateral",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2063_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2062,
            "contract": "contracts/LiquidationRouter.sol:LiquidationRouter",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1748_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1748_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1743,
            "contract": "contracts/LiquidationRouter.sol:LiquidationRouter",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1747,
            "contract": "contracts/LiquidationRouter.sol:LiquidationRouter",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}