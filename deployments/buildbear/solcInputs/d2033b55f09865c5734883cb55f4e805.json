{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/interfaces/IOwnable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IOwnable {\n  /**\n   * @dev Returns the address of the current owner.\n   */\n  function owner() external view returns (address);\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) external;\n}\n"
    },
    "contracts/interfaces/IPriceFeed.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IPriceFeed {\n  function token() external view returns (address);\n\n  function price() external view returns (uint256);\n\n  function pricePoint() external view returns (uint256);\n\n  function emitPriceSignal() external;\n\n  event PriceUpdate(address token, uint256 price, uint256 average);\n}\n"
    },
    "contracts/interfaces/ITokenPriceFeed.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IOwnable.sol\";\n\ninterface ITokenPriceFeed is IOwnable {\n    struct TokenInfo {\n        address priceFeed;\n        uint256 mcr; // Minimum Collateralization Ratio\n        uint256 mlr; // Minimum Liquidation Ratio\n        uint256 borrowRate;\n        uint256 decimals;\n    }\n\n    function tokenPriceFeed(address) external view returns (address);\n\n    function tokenPrice(address _token) external view returns (uint256);\n\n    function mcr(address _token) external view returns (uint256);\n\n    function decimals(address _token) external view returns (uint256);\n\n    function mlr(address _token) external view returns (uint256);\n\n    function borrowRate(address _token) external view returns (uint256);\n\n    function setTokenPriceFeed(address _token, address _priceFeed, uint256 _mcr, uint256 _mlr, uint256 _borrowRate, uint256 _decimals) external;\n\n    event NewTokenPriceFeed(\n        address _token,\n        address _priceFeed,\n        string _name,\n        string _symbol,\n        uint256 _mcr,\n        uint256 _mlr,\n        uint256 _borrowRate,\n        uint256 _decimals\n    );\n}\n"
    },
    "contracts/oracles/ChainlinkPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\";\nimport \"../interfaces/IPriceFeed.sol\";\nimport \"../interfaces/ITokenPriceFeed.sol\";\nimport \"../utils/constants.sol\";\n\ncontract ChainlinkPriceFeed is IPriceFeed, Constants {\n    AggregatorV2V3Interface public immutable oracle;\n    address public immutable override token;\n    uint256 public immutable precision;\n    uint256 public updateThreshold = 24 hours;\n\n    constructor(address _oracle, address _token) {\n        require(_oracle != address(0x0), \"e2637b _oracle must not be address 0x0\");\n        require(_token != address(0x0), \"e2637b _token must not be address 0x0\");\n        token = _token;\n        oracle = AggregatorV2V3Interface(_oracle);\n        uint8 decimals = oracle.decimals();\n        require(decimals > 0, \"e2637b decimals must be a positive number\");\n        precision = 10 ** decimals;\n    }\n\n    function price() public view virtual override returns (uint256) {\n        (, int256 _price, , uint256 _timestamp,) = oracle.latestRoundData();\n        require(block.timestamp - _timestamp <= updateThreshold, \"price-outdated\");\n        return (uint256(_price) * DECIMAL_PRECISION) / precision;\n    }\n\n    function pricePoint() public view override returns (uint256) {\n        return price();\n    }\n\n    function emitPriceSignal() public override {\n        emit PriceUpdate(token, price(), price());\n    }\n}\n"
    },
    "contracts/oracles/MockConvertedPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./ChainlinkPriceFeed.sol\";\n\ncontract MockConvertedPriceFeed is IPriceFeed, Constants {\n    IPriceFeed public immutable priceFeed = IPriceFeed(address(0));\n    IPriceFeed public immutable conversionPriceFeed = IPriceFeed(address(0));\n    address public immutable override token;\n\n    address public constant DAI = 0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063;\n    address public constant WETH = 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619;\n    address public constant WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n    address public constant QNT = 0x36B77a184bE8ee56f5E81C56727B20647A42e28E;\n    address public constant PAXG = 0x553d3D295e0f695B9228246232eDF400ed3560B5;\n    address public constant USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\n\n    constructor(address _token) {\n\n        token = _token;\n\n    }\n\n    function price() public view override returns (uint256) {\n       \n    \n        if (token == DAI) return 931895460772162633;\n        if (token == WETH) return 1775994046278866046632;\n        if (token == WMATIC) return 663421266959892649;\n        if (token == QNT) return 75127544993710105763;\n        if (token == PAXG) return 1828020314028793738060;\n        if (token == USDC) return 935946997491670098;\n        \n\n    }\n\n    function pricePoint() public view override returns (uint256) {\n        return price();\n    }\n\n    function emitPriceSignal() public {\n        emit PriceUpdate(token, price(), price());\n    }\n}\n"
    },
    "contracts/utils/constants.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract Constants {\n  uint256 public constant DECIMAL_PRECISION = 1e18;\n  uint256 public constant LIQUIDATION_RESERVE = 1e18;\n  uint256 public constant MAX_INT = 2**256 - 1;\n\n  uint256 public constant PERCENT = (DECIMAL_PRECISION * 1) / 100; // 1%\n  uint256 public constant PERCENT10 = PERCENT * 10; // 10%\n  uint256 public constant PERCENT_05 = PERCENT / 2; // 0.5%\n\n  uint256 public constant MAX_BORROWING_RATE = (DECIMAL_PRECISION * 5) / 100; // 5%\n  uint256 public constant MAX_REDEMPTION_RATE = (DECIMAL_PRECISION * 1) / 100; // 1%\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}