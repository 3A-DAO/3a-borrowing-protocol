{
  "address": "0x905784CA5246f48e8DFAF1888f9b45DCD3F11d54",
  "abi": [
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultFactory",
          "type": "address"
        }
      ],
      "name": "getAllVaults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultFactory",
          "type": "address"
        }
      ],
      "name": "getLiquidatableVaults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultFactory",
          "type": "address"
        }
      ],
      "name": "getProtocolTvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultFactory",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_useMlr",
          "type": "bool"
        }
      ],
      "name": "getRedeemableVaults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "redeemableVaults",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "redeemableCollaterals",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "getVaultCollaterals",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "getVaultTvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        }
      ],
      "name": "getVaultTvlByCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d1c87e0f0daeeaf25352659b2954c5372ccb41ebb96f403fa6f93eb6f6a75f8",
  "receipt": {
    "to": null,
    "from": "0x109861a2A539ddB151eE591588a14CF86309e4E5",
    "contractAddress": "0x905784CA5246f48e8DFAF1888f9b45DCD3F11d54",
    "transactionIndex": 7,
    "gasUsed": "1200619",
    "logsBloom": "0x
    "blockHash": "0x1863072f94aed85cb5c7a01b6b7126f4ba772ccd9b4c8d0da1c02fbc25442450",
    "transactionHash": "0x4d1c87e0f0daeeaf25352659b2954c5372ccb41ebb96f403fa6f93eb6f6a75f8",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 50259727,
        "transactionHash": "0x4d1c87e0f0daeeaf25352659b2954c5372ccb41ebb96f403fa6f93eb6f6a75f8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000109861a2a539ddb151ee591588a14cf86309e4e5",
          "0x000000000000000000000000e7e2cb8c81c10ff191a73fe266788c9ce62ec754"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001a9bfac2560ac73000000000000000000000000000000000000000000000002809c5d608280a353000000000000000000000000000000000000000000004cae1510c1b6c8205e550000000000000000000000000000000000000000000000027ef29db45d1ff6e0000000000000000000000000000000000000000000004cae16ba8162ed810ac8",
        "logIndex": 26,
        "blockHash": "0x1863072f94aed85cb5c7a01b6b7126f4ba772ccd9b4c8d0da1c02fbc25442450"
      }
    ],
    "blockNumber": 50259727,
    "cumulativeGasUsed": "1857024",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4ef7133c8ee374d2ee4b0a52737333c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"}],\"name\":\"getAllVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"}],\"name\":\"getLiquidatableVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"}],\"name\":\"getProtocolTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useMlr\",\"type\":\"bool\"}],\"name\":\"getRedeemableVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"redeemableVaults\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"redeemableCollaterals\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultCollaterals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"}],\"name\":\"getVaultTvlByCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultFactoryHelper.sol\":\"VaultFactoryHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/VaultFactoryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/IVaultFactory.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/ITokenPriceFeed.sol\\\";\\n\\ncontract VaultFactoryHelper {\\n    uint256 public constant DECIMAL_PRECISION = 1e18;\\n\\n    function getAllVaults(address _vaultFactory) public view returns (address[] memory) {\\n        IVaultFactory vaultFactory = IVaultFactory(_vaultFactory);\\n        uint256 vaultCount = vaultFactory.vaultCount();\\n        if (vaultCount == 0) {\\n            return new address[](0);\\n        } else {\\n            address[] memory vaults = new address[](vaultCount);\\n            vaults[0] = vaultFactory.firstVault();\\n            for (uint256 i = 1; i < vaultCount; i++) {\\n                vaults[i] = vaultFactory.nextVault(vaults[i - 1]);\\n            }\\n            return vaults;\\n        }\\n    }\\n\\n    function getVaultTvlByCollateral(address _vaultAddress, address _collateralAddress) public view returns (uint256) {\\n        IVault _vault = IVault(_vaultAddress);\\n        uint256 _collateralAmount = _vault.collateral(_collateralAddress);\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(IVaultFactory(_vault.factory()).priceFeed());\\n        uint256 _price = _priceFeed.tokenPrice(_collateralAddress);\\n        uint256 _normalizedCollateralAmount = _collateralAmount * (10 ** (18 - _priceFeed.decimals(_collateralAddress)));\\n        uint256 _tvl = (_normalizedCollateralAmount * _price) / DECIMAL_PRECISION;\\n        return _tvl;\\n    }\\n\\n    function getVaultTvl(address _vault) public view returns (uint256) {\\n        IVault vault = IVault(_vault);\\n        uint256 tvl = 0;\\n        for (uint256 i = 0; i < vault.collateralsLength(); i++) {\\n            address _collateralAddress = vault.collateralAt(i);\\n            tvl += getVaultTvlByCollateral(_vault, _collateralAddress);\\n        }\\n        return tvl;\\n    }\\n\\n    function getLiquidatableVaults(address _vaultFactory) public view returns (address[] memory) {\\n        IVaultFactory vaultFactory = IVaultFactory(_vaultFactory);\\n        uint256 vaultCount = vaultFactory.vaultCount();\\n        uint256 liquidatableVaultCount = 0;\\n        if (vaultCount == 0) {\\n            return new address[](0);\\n        } else {\\n            address[] memory _vaults = getAllVaults(_vaultFactory);\\n            address[] memory _liquidatableVaults = new address[](vaultCount);\\n\\n            for (uint256 i = 0; i < vaultCount; i++) {\\n                IVault _vault = IVault(_vaults[i]);\\n                if (vaultFactory.isLiquidatable(address(_vault))) {\\n                    _liquidatableVaults[liquidatableVaultCount] = address(_vault);\\n                    liquidatableVaultCount++;\\n                }\\n            }\\n\\n            address[] memory liquidatableVaults = new address[](liquidatableVaultCount);\\n            for (uint256 i = 0; i < liquidatableVaultCount; i++) {\\n                liquidatableVaults[i] = _liquidatableVaults[i];\\n            }\\n\\n            return liquidatableVaults;\\n        }\\n    }\\n\\n    function getRedeemableVaults(address _vaultFactory, bool _useMlr) public view returns (address[] memory redeemableVaults, address[] memory redeemableCollaterals) {\\n\\n        IVaultFactory vaultFactory = IVaultFactory(_vaultFactory);\\n        uint256 vaultCount = vaultFactory.vaultCount();\\n        uint256 redeemableVaultCount = 0;\\n        uint256 healthFactorLimit = vaultFactory.redemptionHealthFactorLimit();\\n        if (vaultCount == 0) {\\n            return (new address[](0), new address[](0));\\n        } else {\\n            address[] memory _vaults = getAllVaults(_vaultFactory);\\n            address[] memory _redeemableVaults = new address[](vaultCount);\\n            address[] memory _redeemableCollaterals = new address[](vaultCount);\\n\\n            for (uint256 i = 0; i < vaultCount; i++) {\\n                IVault _vault = IVault(_vaults[i]);\\n                if (_vault.healthFactor(_useMlr) < healthFactorLimit) {\\n                    _redeemableVaults[redeemableVaultCount] = address(_vault);\\n\\n                    address[] memory _collaterals = getVaultCollaterals(address(_vault));\\n\\n                    for (uint256 j = 0; j < _collaterals.length; j++) {\\n                        if (vaultFactory.isReedemable(address(_vault), _collaterals[j])) {\\n                            _redeemableCollaterals[redeemableVaultCount] = _collaterals[j];\\n                            break;\\n                        }\\n                    }\\n\\n                    redeemableVaultCount++;\\n                }\\n            }\\n\\n            redeemableVaults = new address[](redeemableVaultCount);\\n            redeemableCollaterals = new address[](redeemableVaultCount);\\n\\n            for (uint256 i = 0; i < redeemableVaultCount; i++) {\\n                redeemableVaults[i] = _redeemableVaults[i];\\n                redeemableCollaterals[i] = _redeemableCollaterals[i];\\n            }\\n        }\\n\\n    }\\n\\n    function getVaultCollaterals(address _vault) public view returns (address[] memory) {\\n        IVault vault = IVault(_vault);\\n        uint256 collateralsLength = vault.collateralsLength();\\n        if (collateralsLength == 0) {\\n            return new address[](0);\\n        } else {\\n            address[] memory collaterals = new address[](collateralsLength);\\n            for (uint256 i = 0; i < collateralsLength; i++) {\\n                collaterals[i] = vault.collateralAt(i);\\n            }\\n            return collaterals;\\n        }\\n    }\\n\\n    function getProtocolTvl(address _vaultFactory) public view returns (uint256) {\\n        IVaultFactory vaultFactory = IVaultFactory(_vaultFactory);\\n        uint256 vaultCount = vaultFactory.vaultCount();\\n        uint256 tvl = 0;\\n        if (vaultCount == 0) {\\n            return 0;\\n        } else {\\n            address[] memory _vaults = getAllVaults(_vaultFactory);\\n            for (uint256 i = 0; i < vaultCount; i++) {\\n                tvl += getVaultTvl(_vaults[i]);\\n            }\\n            return tvl;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbe54079bb7814696f72df9df8a8d4f00aef54b40f1ad72ca07f9912b8527fd49\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x955ead6c2a923863ba607a752e4a9924ab4fe4d07dd6cf09e5f68d0bece11049\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenPriceFeed.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface ITokenPriceFeed is IOwnable {\\n    struct TokenInfo {\\n        address priceFeed;\\n        uint256 mcr; // Minimum Collateralization Ratio\\n        uint256 mlr; // Minimum Liquidation Ratio\\n        uint256 borrowRate;\\n        uint256 decimals;\\n    }\\n\\n    function tokenPriceFeed(address) external view returns (address);\\n\\n    function tokenPrice(address _token) external view returns (uint256);\\n\\n    function mcr(address _token) external view returns (uint256);\\n\\n    function decimals(address _token) external view returns (uint256);\\n\\n    function mlr(address _token) external view returns (uint256);\\n\\n    function borrowRate(address _token) external view returns (uint256);\\n\\n    function setTokenPriceFeed(address _token, address _priceFeed, uint256 _mcr, uint256 _mlr, uint256 _borrowRate, uint256 _decimals) external;\\n\\n    event NewTokenPriceFeed(\\n        address _token,\\n        address _priceFeed,\\n        string _name,\\n        string _symbol,\\n        uint256 _mcr,\\n        uint256 _mlr,\\n        uint256 _borrowRate,\\n        uint256 _decimals\\n    );\\n}\\n\",\"keccak256\":\"0xbc40f3c92c4f7a12a4a053d372c7c8621b16e104c0b0d3c20ddf6d8950aa6b90\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IVault {\\n    function vaultOwner() external view returns (address);\\n    function debt() external view returns (uint256);\\n    function transferVaultOwnership(address _newOwner) external;\\n    function setName(string memory _name) external;\\n    function containsCollateral(address _collateral) external view returns (bool);\\n    function collateralsLength() external view returns (uint256);\\n    function collateralAt(uint256 _index) external view returns (address);\\n    function collaterals() external view returns (address[] memory);\\n    function collateral(address _collateral) external view returns (uint256);\\n    function factory() external view returns (address);\\n    function addCollateral(address _collateral, uint256 _amount) external;\\n    function removeCollateral(address _collateral, uint256 _amount, address _to) external;\\n    function addBadDebt(uint256 _amount) external;\\n    function borrowable() external view returns (uint256 _maxBorrowable, uint256 _borrowable);\\n    function borrow(uint256 _amount) external;\\n    function repay(uint256 _amount) external;\\n    function calcRedeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    ) external view returns (uint256 _stableAmountNeeded, uint256 _redemptionFee);\\n    function redeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    ) external returns (uint256 _debtRepaid, uint256 _feeCollected);\\n    function healthFactor(bool _useMlr) external view returns (uint256 _healthFactor);\\n    function newHealthFactor(uint256 _newDebt, bool _useMlr) external view returns (uint256 _newHealthFactor);\\n    function borrowableWithDiff(\\n        address _collateral,\\n        uint256 _diffAmount,\\n        bool _isAdd,\\n        bool _useMlr\\n    ) external view returns (uint256 _maxBorrowable, uint256 _borrowable);\\n    function liquidate() external returns (uint256 _forgivenDebt);\\n}\\n\",\"keccak256\":\"0xa681d2b7702fd9f9d220951d8696859bf9f0c2df80ee3f286857d2bdaddc97e6\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IVaultFactory {\\n    event NewVault(address indexed vault, string name, address indexed owner);\\n    event PriceFeedUpdated(address indexed priceFeed);\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function vaultCount() external view returns (uint256);\\n    function lastVault() external view returns (address);\\n    function firstVault() external view returns (address);\\n    function nextVault(address _vault) external view returns (address);\\n    function prevVault(address _vault) external view returns (address);\\n    function liquidationRouter() external view returns (address);\\n    function MAX_TOKENS_PER_VAULT() external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function transferVaultOwnership(address _vault, address _newOwner) external;\\n    function createVault(string memory _name) external returns (address);\\n    function addCollateralNative(address _vault) external payable;\\n    function removeCollateralNative(address _vault, uint256 _amount, address _to) external;\\n    function addCollateral(address _vault, address _collateral, uint256 _amount) external;\\n    function removeCollateral(address _vault, address _collateral, uint256 _amount, address _to) external;\\n    function borrow(address _vault, uint256 _amount, address _to) external;\\n    function distributeBadDebt(address _vault, uint256 _amount) external;\\n    function closeVault(address _vault) external;\\n    function repay(address _vault, uint256 _amount) external;\\n    function redeem(address _vault, address _collateral, uint256 _collateralAmount, address _to) external;\\n    function liquidate(address _vault) external;\\n    function isLiquidatable(address _vault) external view returns (bool);\\n    function isReedemable(address _vault, address _collateral) external view returns (bool);\\n    function containsVault(address _vault) external view returns (bool);\\n    function stable() external view returns (address);\\n    function isCollateralSupported(address _collateral) external view returns (bool);\\n    function vaultsByOwnerLength(address _owner) external view returns (uint256);\\n    function redemptionHealthFactorLimit() external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0xdb828b10eca4a9230874f1e11abbf6c2466c9b426de8ce4bf188791eefe66204\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506114c9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a20baee61161005b578063a20baee6146100f9578063a2e5437c14610108578063b31107e31461011b578063daec87bf1461012e57600080fd5b80633e3e50a21461008d57806347d70010146100b35780636cd66aa2146100c65780637e966cae146100d9575b600080fd5b6100a061009b366004611178565b61014f565b6040519081526020015b60405180910390f35b6100a06100c1366004611178565b610233565b6100a06100d436600461119c565b610342565b6100ec6100e7366004611178565b6105f6565b6040516100aa9190611219565b6100a0670de0b6b3a764000081565b6100ec610116366004611178565b610890565b6100ec610129366004611178565b610af4565b61014161013c36600461123a565b610c67565b6040516100aa929190611268565b6000808290506000816001600160a01b031663a7c6a1006040518163ffffffff1660e01b8152600401602060405180830381865afa158015610195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b99190611296565b90506000816000036101d057506000949350505050565b60006101db86610890565b905060005b838110156102285761020a8282815181106101fd576101fd6112af565b6020026020010151610233565b61021490846112db565b925080610220816112ee565b9150506101e0565b509095945050505050565b60008181805b826001600160a01b03166329ad2fb26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029b9190611296565b81101561033a57604051630fb32b2360e11b8152600481018290526000906001600160a01b03851690631f66564690602401602060405180830381865afa1580156102ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030e9190611307565b905061031a8682610342565b61032490846112db565b9250508080610332906112ee565b915050610239565b509392505050565b6040517fa5fdc5de0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152600091849183919083169063a5fdc5de90602401602060405180830381865afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd9190611296565b90506000826001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561040f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104339190611307565b6001600160a01b031663741bef1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190611307565b6040517f84ba3f690000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529192506000918316906384ba3f6990602401602060405180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190611296565b6040517fd449a8320000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015291925060009184169063d449a83290602401602060405180830381865afa158015610582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a69190611296565b6105b1906012611324565b6105bc90600a61141b565b6105c69085611427565b90506000670de0b6b3a76400006105dd8484611427565b6105e7919061143e565b96505050505050505b92915050565b606060008290506000816001600160a01b031663a7c6a1006040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106619190611296565b90506000816000036106855750506040805160008152602081019091529392505050565b600061069086610890565b905060008367ffffffffffffffff8111156106ad576106ad611460565b6040519080825280602002602001820160405280156106d6578160200160208202803683370190505b50905060005b848110156107db5760008382815181106106f8576106f86112af565b60209081029190910101516040517f042e02cf0000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192509088169063042e02cf90602401602060405180830381865afa158015610766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078a9190611476565b156107c857808386815181106107a2576107a26112af565b6001600160a01b0390921660209283029190910190910152846107c4816112ee565b9550505b50806107d3816112ee565b9150506106dc565b5060008367ffffffffffffffff8111156107f7576107f7611460565b604051908082528060200260200182016040528015610820578160200160208202803683370190505b50905060005b8481101561088457828181518110610840576108406112af565b602002602001015182828151811061085a5761085a6112af565b6001600160a01b03909216602092830291909101909101528061087c816112ee565b915050610826565b50979650505050505050565b606060008290506000816001600160a01b031663a7c6a1006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb9190611296565b90508060000361093a5760005b604051908082528060200260200182016040528015610931578160200160208202803683370190505b50949350505050565b60008167ffffffffffffffff81111561095557610955611460565b60405190808252806020026020018201604052801561097e578160200160208202803683370190505b509050826001600160a01b03166396f57b6e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e39190611307565b816000815181106109f6576109f66112af565b6001600160a01b039092166020928302919091019091015260015b82811015610931576001600160a01b038416635b8b577083610a34600185611324565b81518110610a4457610a446112af565b60200260200101516040518263ffffffff1660e01b8152600401610a7791906001600160a01b0391909116815260200190565b602060405180830381865afa158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab89190611307565b828281518110610aca57610aca6112af565b6001600160a01b039092166020928302919091019091015280610aec816112ee565b915050610a11565b606060008290506000816001600160a01b03166329ad2fb26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f9190611296565b905080600003610b70576000610908565b60008167ffffffffffffffff811115610b8b57610b8b611460565b604051908082528060200260200182016040528015610bb4578160200160208202803683370190505b50905060005b8281101561093157604051630fb32b2360e11b8152600481018290526001600160a01b03851690631f66564690602401602060405180830381865afa158015610c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2b9190611307565b828281518110610c3d57610c3d6112af565b6001600160a01b039092166020928302919091019091015280610c5f816112ee565b915050610bba565b60608060008490506000816001600160a01b031663a7c6a1006040518163ffffffff1660e01b8152600401602060405180830381865afa158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd39190611296565b9050600080836001600160a01b031663c3971f656040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a9190611296565b905082600003610d685750506040805160008082526020820190815281830190925294509250611159915050565b6000610d7389610890565b905060008467ffffffffffffffff811115610d9057610d90611460565b604051908082528060200260200182016040528015610db9578160200160208202803683370190505b50905060008567ffffffffffffffff811115610dd757610dd7611460565b604051908082528060200260200182016040528015610e00578160200160208202803683370190505b50905060005b86811015611018576000848281518110610e2257610e226112af565b6020026020010151905085816001600160a01b031663c3f7e0b78e6040518263ffffffff1660e01b8152600401610e5d911515815260200190565b602060405180830381865afa158015610e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9e9190611296565b10156110055780848881518110610eb757610eb76112af565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610ee282610af4565b905060005b8151811015610ff5578a6001600160a01b03166304aecb7684848481518110610f1257610f126112af565b60200260200101516040518363ffffffff1660e01b8152600401610f4c9291906001600160a01b0392831681529116602082015260400190565b602060405180830381865afa158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d9190611476565b15610fe357818181518110610fa457610fa46112af565b6020026020010151858a81518110610fbe57610fbe6112af565b60200260200101906001600160a01b031690816001600160a01b031681525050610ff5565b80610fed816112ee565b915050610ee7565b5087611000816112ee565b985050505b5080611010816112ee565b915050610e06565b508467ffffffffffffffff81111561103257611032611460565b60405190808252806020026020018201604052801561105b578160200160208202803683370190505b5098508467ffffffffffffffff81111561107757611077611460565b6040519080825280602002602001820160405280156110a0578160200160208202803683370190505b50975060005b85811015611150578281815181106110c0576110c06112af565b60200260200101518a82815181106110da576110da6112af565b60200260200101906001600160a01b031690816001600160a01b03168152505081818151811061110c5761110c6112af565b6020026020010151898281518110611126576111266112af565b6001600160a01b039092166020928302919091019091015280611148816112ee565b9150506110a6565b50505050505050505b9250929050565b6001600160a01b038116811461117557600080fd5b50565b60006020828403121561118a57600080fd5b813561119581611160565b9392505050565b600080604083850312156111af57600080fd5b82356111ba81611160565b915060208301356111ca81611160565b809150509250929050565b600081518084526020808501945080840160005b8381101561120e5781516001600160a01b0316875295820195908201906001016111e9565b509495945050505050565b60208152600061119560208301846111d5565b801515811461117557600080fd5b6000806040838503121561124d57600080fd5b823561125881611160565b915060208301356111ca8161122c565b60408152600061127b60408301856111d5565b828103602084015261128d81856111d5565b95945050505050565b6000602082840312156112a857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156105f0576105f06112c5565b600060018201611300576113006112c5565b5060010190565b60006020828403121561131957600080fd5b815161119581611160565b818103818111156105f0576105f06112c5565b600181815b80851115611372578160001904821115611358576113586112c5565b8085161561136557918102915b93841c939080029061133c565b509250929050565b600082611389575060016105f0565b81611396575060006105f0565b81600181146113ac57600281146113b6576113d2565b60019150506105f0565b60ff8411156113c7576113c76112c5565b50506001821b6105f0565b5060208310610133831016604e8410600b84101617156113f5575081810a6105f0565b6113ff8383611337565b8060001904821115611413576114136112c5565b029392505050565b6000611195838361137a565b80820281158282048414176105f0576105f06112c5565b60008261145b57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561148857600080fd5b81516111958161122c56fea26469706673582212205dfdb6e742a65804565c6c9382d9d4846e86df544a0647208887f3b84e8dcc2664736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a20baee61161005b578063a20baee6146100f9578063a2e5437c14610108578063b31107e31461011b578063daec87bf1461012e57600080fd5b80633e3e50a21461008d57806347d70010146100b35780636cd66aa2146100c65780637e966cae146100d9575b600080fd5b6100a061009b366004611178565b61014f565b6040519081526020015b60405180910390f35b6100a06100c1366004611178565b610233565b6100a06100d436600461119c565b610342565b6100ec6100e7366004611178565b6105f6565b6040516100aa9190611219565b6100a0670de0b6b3a764000081565b6100ec610116366004611178565b610890565b6100ec610129366004611178565b610af4565b61014161013c36600461123a565b610c67565b6040516100aa929190611268565b6000808290506000816001600160a01b031663a7c6a1006040518163ffffffff1660e01b8152600401602060405180830381865afa158015610195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b99190611296565b90506000816000036101d057506000949350505050565b60006101db86610890565b905060005b838110156102285761020a8282815181106101fd576101fd6112af565b6020026020010151610233565b61021490846112db565b925080610220816112ee565b9150506101e0565b509095945050505050565b60008181805b826001600160a01b03166329ad2fb26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029b9190611296565b81101561033a57604051630fb32b2360e11b8152600481018290526000906001600160a01b03851690631f66564690602401602060405180830381865afa1580156102ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030e9190611307565b905061031a8682610342565b61032490846112db565b9250508080610332906112ee565b915050610239565b509392505050565b6040517fa5fdc5de0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152600091849183919083169063a5fdc5de90602401602060405180830381865afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd9190611296565b90506000826001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561040f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104339190611307565b6001600160a01b031663741bef1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190611307565b6040517f84ba3f690000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529192506000918316906384ba3f6990602401602060405180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190611296565b6040517fd449a8320000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015291925060009184169063d449a83290602401602060405180830381865afa158015610582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a69190611296565b6105b1906012611324565b6105bc90600a61141b565b6105c69085611427565b90506000670de0b6b3a76400006105dd8484611427565b6105e7919061143e565b96505050505050505b92915050565b606060008290506000816001600160a01b031663a7c6a1006040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106619190611296565b90506000816000036106855750506040805160008152602081019091529392505050565b600061069086610890565b905060008367ffffffffffffffff8111156106ad576106ad611460565b6040519080825280602002602001820160405280156106d6578160200160208202803683370190505b50905060005b848110156107db5760008382815181106106f8576106f86112af565b60209081029190910101516040517f042e02cf0000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192509088169063042e02cf90602401602060405180830381865afa158015610766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078a9190611476565b156107c857808386815181106107a2576107a26112af565b6001600160a01b0390921660209283029190910190910152846107c4816112ee565b9550505b50806107d3816112ee565b9150506106dc565b5060008367ffffffffffffffff8111156107f7576107f7611460565b604051908082528060200260200182016040528015610820578160200160208202803683370190505b50905060005b8481101561088457828181518110610840576108406112af565b602002602001015182828151811061085a5761085a6112af565b6001600160a01b03909216602092830291909101909101528061087c816112ee565b915050610826565b50979650505050505050565b606060008290506000816001600160a01b031663a7c6a1006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb9190611296565b90508060000361093a5760005b604051908082528060200260200182016040528015610931578160200160208202803683370190505b50949350505050565b60008167ffffffffffffffff81111561095557610955611460565b60405190808252806020026020018201604052801561097e578160200160208202803683370190505b509050826001600160a01b03166396f57b6e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e39190611307565b816000815181106109f6576109f66112af565b6001600160a01b039092166020928302919091019091015260015b82811015610931576001600160a01b038416635b8b577083610a34600185611324565b81518110610a4457610a446112af565b60200260200101516040518263ffffffff1660e01b8152600401610a7791906001600160a01b0391909116815260200190565b602060405180830381865afa158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab89190611307565b828281518110610aca57610aca6112af565b6001600160a01b039092166020928302919091019091015280610aec816112ee565b915050610a11565b606060008290506000816001600160a01b03166329ad2fb26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f9190611296565b905080600003610b70576000610908565b60008167ffffffffffffffff811115610b8b57610b8b611460565b604051908082528060200260200182016040528015610bb4578160200160208202803683370190505b50905060005b8281101561093157604051630fb32b2360e11b8152600481018290526001600160a01b03851690631f66564690602401602060405180830381865afa158015610c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2b9190611307565b828281518110610c3d57610c3d6112af565b6001600160a01b039092166020928302919091019091015280610c5f816112ee565b915050610bba565b60608060008490506000816001600160a01b031663a7c6a1006040518163ffffffff1660e01b8152600401602060405180830381865afa158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd39190611296565b9050600080836001600160a01b031663c3971f656040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a9190611296565b905082600003610d685750506040805160008082526020820190815281830190925294509250611159915050565b6000610d7389610890565b905060008467ffffffffffffffff811115610d9057610d90611460565b604051908082528060200260200182016040528015610db9578160200160208202803683370190505b50905060008567ffffffffffffffff811115610dd757610dd7611460565b604051908082528060200260200182016040528015610e00578160200160208202803683370190505b50905060005b86811015611018576000848281518110610e2257610e226112af565b6020026020010151905085816001600160a01b031663c3f7e0b78e6040518263ffffffff1660e01b8152600401610e5d911515815260200190565b602060405180830381865afa158015610e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9e9190611296565b10156110055780848881518110610eb757610eb76112af565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610ee282610af4565b905060005b8151811015610ff5578a6001600160a01b03166304aecb7684848481518110610f1257610f126112af565b60200260200101516040518363ffffffff1660e01b8152600401610f4c9291906001600160a01b0392831681529116602082015260400190565b602060405180830381865afa158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d9190611476565b15610fe357818181518110610fa457610fa46112af565b6020026020010151858a81518110610fbe57610fbe6112af565b60200260200101906001600160a01b031690816001600160a01b031681525050610ff5565b80610fed816112ee565b915050610ee7565b5087611000816112ee565b985050505b5080611010816112ee565b915050610e06565b508467ffffffffffffffff81111561103257611032611460565b60405190808252806020026020018201604052801561105b578160200160208202803683370190505b5098508467ffffffffffffffff81111561107757611077611460565b6040519080825280602002602001820160405280156110a0578160200160208202803683370190505b50975060005b85811015611150578281815181106110c0576110c06112af565b60200260200101518a82815181106110da576110da6112af565b60200260200101906001600160a01b031690816001600160a01b03168152505081818151811061110c5761110c6112af565b6020026020010151898281518110611126576111266112af565b6001600160a01b039092166020928302919091019091015280611148816112ee565b9150506110a6565b50505050505050505b9250929050565b6001600160a01b038116811461117557600080fd5b50565b60006020828403121561118a57600080fd5b813561119581611160565b9392505050565b600080604083850312156111af57600080fd5b82356111ba81611160565b915060208301356111ca81611160565b809150509250929050565b600081518084526020808501945080840160005b8381101561120e5781516001600160a01b0316875295820195908201906001016111e9565b509495945050505050565b60208152600061119560208301846111d5565b801515811461117557600080fd5b6000806040838503121561124d57600080fd5b823561125881611160565b915060208301356111ca8161122c565b60408152600061127b60408301856111d5565b828103602084015261128d81856111d5565b95945050505050565b6000602082840312156112a857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156105f0576105f06112c5565b600060018201611300576113006112c5565b5060010190565b60006020828403121561131957600080fd5b815161119581611160565b818103818111156105f0576105f06112c5565b600181815b80851115611372578160001904821115611358576113586112c5565b8085161561136557918102915b93841c939080029061133c565b509250929050565b600082611389575060016105f0565b81611396575060006105f0565b81600181146113ac57600281146113b6576113d2565b60019150506105f0565b60ff8411156113c7576113c76112c5565b50506001821b6105f0565b5060208310610133831016604e8410600b84101617156113f5575081810a6105f0565b6113ff8383611337565b8060001904821115611413576114136112c5565b029392505050565b6000611195838361137a565b80820281158282048414176105f0576105f06112c5565b60008261145b57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561148857600080fd5b81516111958161122c56fea26469706673582212205dfdb6e742a65804565c6c9382d9d4846e86df544a0647208887f3b84e8dcc2664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}