{
  "address": "0x1E7224703E1B289e06F0Ff12519685fCf8E9306c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        }
      ],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d81c5a79d4c3356496af228e77cc1beb50f14f4e02da32ebd21630640150196",
  "receipt": {
    "to": null,
    "from": "0x109861a2A539ddB151eE591588a14CF86309e4E5",
    "contractAddress": "0x1E7224703E1B289e06F0Ff12519685fCf8E9306c",
    "transactionIndex": 87,
    "gasUsed": "470000",
    "logsBloom": "0x
    "blockHash": "0x9eebdde18ced9c6dbbe5177dfd9f0155072ee87ab130cc3d05b83cd5167b619b",
    "transactionHash": "0x3d81c5a79d4c3356496af228e77cc1beb50f14f4e02da32ebd21630640150196",
    "logs": [
      {
        "transactionIndex": 87,
        "blockNumber": 49454142,
        "transactionHash": "0x3d81c5a79d4c3356496af228e77cc1beb50f14f4e02da32ebd21630640150196",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000109861a2a539ddb151ee591588a14cf86309e4e5",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000041c8a7de13b60000000000000000000000000000000000000000000000004863f771f58cdac3e00000000000000000000000000000000000000000002748b3b3e75aac5ee45eb000000000000000000000000000000000000000000000004863b5a94daec70de00000000000000000000000000000000000000000002748b3b42923543cf814b",
        "logIndex": 371,
        "blockHash": "0x9eebdde18ced9c6dbbe5177dfd9f0155072ee87ab130cc3d05b83cd5167b619b"
      }
    ],
    "blockNumber": 49454142,
    "cumulativeGasUsed": "11927614",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3d7ac3cd8c655c7d05e6510673d0ef5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultBorrowRate.sol\":\"VaultBorrowRate\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/VaultBorrowRate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/ITokenPriceFeed.sol\\\";\\nimport \\\"./interfaces/IVaultFactory.sol\\\";\\n\\ncontract VaultBorrowRate {\\n\\n    function getBorrowRate(address _vaultAddress) external view returns (uint256) {\\n\\n        IVault _vault = IVault(_vaultAddress);\\n        IVaultFactory _vaultFactory = IVaultFactory(_vault.factory());\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(_vaultFactory.priceFeed());\\n        uint256 _totalWeightedFee;\\n        uint256 _totalCollateralValue;\\n        uint256 _collateralsLength = _vault.collateralsLength();\\n\\n        for (uint256 i; i < _collateralsLength; i++) {\\n            address _collateralAddress = _vault.collateralAt(i);\\n            uint256 _collateralAmount = _vault.collateral(_collateralAddress);\\n            uint256 _price = _priceFeed.tokenPrice(_collateralAddress);\\n            uint256 _borrowRate = _priceFeed.borrowRate(_collateralAddress);\\n\\n            uint256 _normalizedCollateralAmount = _collateralAmount * (10 ** (18 - _priceFeed.decimals(_collateralAddress)));\\n            uint256 _collateralValue = (_normalizedCollateralAmount * _price) / (10 ** _priceFeed.decimals(_collateralAddress));\\n            uint256 _weightedFee = (_collateralValue * _borrowRate) / 1e18;\\n\\n            _totalCollateralValue += _collateralValue;\\n            _totalWeightedFee += _weightedFee;\\n        }\\n\\n        return ((_totalWeightedFee * 1e18) / _totalCollateralValue) / 100;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x1edc6f83462dd55e009f96c2ad1d711b6d27e16e90b9e25f06dfaaabfd711341\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x955ead6c2a923863ba607a752e4a9924ab4fe4d07dd6cf09e5f68d0bece11049\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenPriceFeed.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface ITokenPriceFeed is IOwnable {\\n    struct TokenInfo {\\n        address priceFeed;\\n        uint256 mcr; // Minimum Collateralization Ratio\\n        uint256 mlr; // Minimum Liquidation Ratio\\n        uint256 borrowRate;\\n        uint256 decimals;\\n    }\\n\\n    function tokenPriceFeed(address) external view returns (address);\\n\\n    function tokenPrice(address _token) external view returns (uint256);\\n\\n    function mcr(address _token) external view returns (uint256);\\n\\n    function decimals(address _token) external view returns (uint256);\\n\\n    function mlr(address _token) external view returns (uint256);\\n\\n    function borrowRate(address _token) external view returns (uint256);\\n\\n    function setTokenPriceFeed(address _token, address _priceFeed, uint256 _mcr, uint256 _mlr, uint256 _borrowRate, uint256 _decimals) external;\\n\\n    event NewTokenPriceFeed(\\n        address _token,\\n        address _priceFeed,\\n        string _name,\\n        string _symbol,\\n        uint256 _mcr,\\n        uint256 _mlr,\\n        uint256 _borrowRate,\\n        uint256 _decimals\\n    );\\n}\\n\",\"keccak256\":\"0xbc40f3c92c4f7a12a4a053d372c7c8621b16e104c0b0d3c20ddf6d8950aa6b90\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IVault {\\n    function vaultOwner() external view returns (address);\\n    function debt() external view returns (uint256);\\n    function transferVaultOwnership(address _newOwner) external;\\n    function setName(string memory _name) external;\\n    function containsCollateral(address _collateral) external view returns (bool);\\n    function collateralsLength() external view returns (uint256);\\n    function collateralAt(uint256 _index) external view returns (address);\\n    function collaterals() external view returns (address[] memory);\\n    function collateral(address _collateral) external view returns (uint256);\\n    function factory() external view returns (address);\\n    function addCollateral(address _collateral, uint256 _amount) external;\\n    function removeCollateral(address _collateral, uint256 _amount, address _to) external;\\n    function addBadDebt(uint256 _amount) external;\\n    function borrowable() external view returns (uint256 _maxBorrowable, uint256 _borrowable);\\n    function borrow(uint256 _amount) external;\\n    function repay(uint256 _amount) external;\\n    function calcRedeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    ) external view returns (uint256 _stableAmountNeeded, uint256 _redemptionFee);\\n    function redeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    ) external returns (uint256 _debtRepaid, uint256 _feeCollected);\\n    function healthFactor(bool _useMlr) external view returns (uint256 _healthFactor);\\n    function newHealthFactor(uint256 _newDebt, bool _useMlr) external view returns (uint256 _newHealthFactor);\\n    function borrowableWithDiff(\\n        address _collateral,\\n        uint256 _diffAmount,\\n        bool _isAdd,\\n        bool _useMlr\\n    ) external view returns (uint256 _maxBorrowable, uint256 _borrowable);\\n    function liquidate() external returns (uint256 _forgivenDebt);\\n}\\n\",\"keccak256\":\"0xa681d2b7702fd9f9d220951d8696859bf9f0c2df80ee3f286857d2bdaddc97e6\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IVaultFactory {\\n    event NewVault(address indexed vault, string name, address indexed owner);\\n    event PriceFeedUpdated(address indexed priceFeed);\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function vaultCount() external view returns (uint256);\\n    function lastVault() external view returns (address);\\n    function firstVault() external view returns (address);\\n    function nextVault(address _vault) external view returns (address);\\n    function prevVault(address _vault) external view returns (address);\\n    function liquidationRouter() external view returns (address);\\n    function MAX_TOKENS_PER_VAULT() external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function transferVaultOwnership(address _vault, address _newOwner) external;\\n    function createVault(string memory _name) external returns (address);\\n    function addCollateralNative(address _vault) external payable;\\n    function removeCollateralNative(address _vault, uint256 _amount, address _to) external;\\n    function addCollateral(address _vault, address _collateral, uint256 _amount) external;\\n    function removeCollateral(address _vault, address _collateral, uint256 _amount, address _to) external;\\n    function borrow(address _vault, uint256 _amount, address _to) external;\\n    function distributeBadDebt(address _vault, uint256 _amount) external;\\n    function closeVault(address _vault) external;\\n    function repay(address _vault, uint256 _amount) external;\\n    function redeem(address _vault, address _collateral, uint256 _collateralAmount, address _to) external;\\n    function liquidate(address _vault) external;\\n    function isLiquidatable(address _vault) external view returns (bool);\\n    function isReedemable(address _vault, address _collateral) external view returns (bool);\\n    function containsVault(address _vault) external view returns (bool);\\n    function stable() external view returns (address);\\n    function isCollateralSupported(address _collateral) external view returns (bool);\\n    function vaultsByOwnerLength(address _owner) external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x2d7245f166e18b43f804a62264391432008a204d43920f6ac000fb41657f169b\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610791806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d71275f614610030575b600080fd5b61004361003e36600461057d565b610055565b60405190815260200160405180910390f35b6000808290506000816001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561009b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bf91906105a1565b90506000816001600160a01b031663741bef1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610101573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012591906105a1565b90506000806000856001600160a01b03166329ad2fb26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561016a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018e91906105be565b905060005b8181101561052f576040517f1f665646000000000000000000000000000000000000000000000000000000008152600481018290526000906001600160a01b03891690631f66564690602401602060405180830381865afa1580156101fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022091906105a1565b6040517fa5fdc5de0000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192506000918a169063a5fdc5de90602401602060405180830381865afa158015610285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a991906105be565b6040517f84ba3f690000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529192506000918916906384ba3f6990602401602060405180830381865afa15801561030e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033291906105be565b6040517f08c728e10000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529192506000918a16906308c728e190602401602060405180830381865afa158015610397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bb91906105be565b604051636a24d41960e11b81526001600160a01b0386811660048301529192506000918b169063d449a83290602401602060405180830381865afa158015610407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042b91906105be565b6104369060126105ed565b61044190600a6106ea565b61044b90856106f6565b604051636a24d41960e11b81526001600160a01b0387811660048301529192506000918c169063d449a83290602401602060405180830381865afa158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb91906105be565b6104c690600a6106ea565b6104d085846106f6565b6104da919061070d565b90506000670de0b6b3a76400006104f185846106f6565b6104fb919061070d565b9050610507828b61072f565b9950610513818c61072f565b9a5050505050505050808061052790610742565b915050610193565b5060648261054585670de0b6b3a76400006106f6565b61054f919061070d565b610559919061070d565b98975050505050505050565b6001600160a01b038116811461057a57600080fd5b50565b60006020828403121561058f57600080fd5b813561059a81610565565b9392505050565b6000602082840312156105b357600080fd5b815161059a81610565565b6000602082840312156105d057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610600576106006105d7565b92915050565b600181815b80851115610641578160001904821115610627576106276105d7565b8085161561063457918102915b93841c939080029061060b565b509250929050565b60008261065857506001610600565b8161066557506000610600565b816001811461067b5760028114610685576106a1565b6001915050610600565b60ff841115610696576106966105d7565b50506001821b610600565b5060208310610133831016604e8410600b84101617156106c4575081810a610600565b6106ce8383610606565b80600019048211156106e2576106e26105d7565b029392505050565b600061059a8383610649565b8082028115828204841417610600576106006105d7565b60008261072a57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610600576106006105d7565b600060018201610754576107546105d7565b506001019056fea26469706673582212207aab02bd0929aa242e1c2c1d96b601f6de61c8a9427036a59541e30792ac7f1964736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d71275f614610030575b600080fd5b61004361003e36600461057d565b610055565b60405190815260200160405180910390f35b6000808290506000816001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561009b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bf91906105a1565b90506000816001600160a01b031663741bef1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610101573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012591906105a1565b90506000806000856001600160a01b03166329ad2fb26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561016a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018e91906105be565b905060005b8181101561052f576040517f1f665646000000000000000000000000000000000000000000000000000000008152600481018290526000906001600160a01b03891690631f66564690602401602060405180830381865afa1580156101fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022091906105a1565b6040517fa5fdc5de0000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192506000918a169063a5fdc5de90602401602060405180830381865afa158015610285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a991906105be565b6040517f84ba3f690000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529192506000918916906384ba3f6990602401602060405180830381865afa15801561030e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033291906105be565b6040517f08c728e10000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529192506000918a16906308c728e190602401602060405180830381865afa158015610397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bb91906105be565b604051636a24d41960e11b81526001600160a01b0386811660048301529192506000918b169063d449a83290602401602060405180830381865afa158015610407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042b91906105be565b6104369060126105ed565b61044190600a6106ea565b61044b90856106f6565b604051636a24d41960e11b81526001600160a01b0387811660048301529192506000918c169063d449a83290602401602060405180830381865afa158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb91906105be565b6104c690600a6106ea565b6104d085846106f6565b6104da919061070d565b90506000670de0b6b3a76400006104f185846106f6565b6104fb919061070d565b9050610507828b61072f565b9950610513818c61072f565b9a5050505050505050808061052790610742565b915050610193565b5060648261054585670de0b6b3a76400006106f6565b61054f919061070d565b610559919061070d565b98975050505050505050565b6001600160a01b038116811461057a57600080fd5b50565b60006020828403121561058f57600080fd5b813561059a81610565565b9392505050565b6000602082840312156105b357600080fd5b815161059a81610565565b6000602082840312156105d057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610600576106006105d7565b92915050565b600181815b80851115610641578160001904821115610627576106276105d7565b8085161561063457918102915b93841c939080029061060b565b509250929050565b60008261065857506001610600565b8161066557506000610600565b816001811461067b5760028114610685576106a1565b6001915050610600565b60ff841115610696576106966105d7565b50506001821b610600565b5060208310610133831016604e8410600b84101617156106c4575081810a610600565b6106ce8383610606565b80600019048211156106e2576106e26105d7565b029392505050565b600061059a8383610649565b8082028115828204841417610600576106006105d7565b60008261072a57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610600576106006105d7565b600060018201610754576107546105d7565b506001019056fea26469706673582212207aab02bd0929aa242e1c2c1d96b601f6de61c8a9427036a59541e30792ac7f1964736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}