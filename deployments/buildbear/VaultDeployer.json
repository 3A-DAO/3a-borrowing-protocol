{
  "address": "0xDFf76acD594101fB5e9FaE176aEDb21A7a1Fe39F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "deployVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d9bf3a80b4512a513bb1bf692834a79463d029b014df76705b8cea81ca840f3",
  "receipt": {
    "to": null,
    "from": "0x109861a2A539ddB151eE591588a14CF86309e4E5",
    "contractAddress": "0xDFf76acD594101fB5e9FaE176aEDb21A7a1Fe39F",
    "transactionIndex": 0,
    "gasUsed": "3045474",
    "logsBloom": "0x
    "blockHash": "0x6cebc47b374732b30af121bd5d86fed0108a3611d92132d6affd9fb96e36b8e8",
    "transactionHash": "0x1d9bf3a80b4512a513bb1bf692834a79463d029b014df76705b8cea81ca840f3",
    "logs": [],
    "blockNumber": 49793555,
    "cumulativeGasUsed": "3045474",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c1f01be883389fd2b5739513123641b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"deployVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultDeployer.sol\":\"VaultDeployer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./interfaces/IPriceFeed.sol\\\";\\nimport \\\"./interfaces/IVaultFactory.sol\\\";\\nimport \\\"./interfaces/IVaultFactoryConfig.sol\\\";\\nimport \\\"./interfaces/ILiquidationRouter.sol\\\";\\n\\nimport \\\"./utils/constants.sol\\\";\\nimport \\\"./interfaces/ITokenPriceFeed.sol\\\";\\nimport \\\"./utils/linked-address-list.sol\\\";\\n\\ncontract Vault is Context, Constants {\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    event CollateralAdded(address indexed collateral, uint256 amount, uint256 newTotalAmount);\\n    event CollateralRemoved(address indexed collateral, uint256 amount, uint256 newTotalAmount);\\n    event CollateralRedeemed(\\n        address indexed collateral,\\n        uint256 amount,\\n        uint256 newTotalAmount,\\n        uint256 stableAmountUsed,\\n        uint256 feePaid\\n    );\\n\\n    event DebtAdded(uint256 amount, uint256 newTotalDebt);\\n    event DebtRepaid(uint256 amount, uint256 newTotalDebt);\\n\\n    modifier onlyFactory() {\\n        require(_msgSender() == factory, \\\"only-factory\\\");\\n        _;\\n    }\\n\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address public immutable stable;\\n    address public immutable factory;\\n    address public vaultOwner;\\n\\n    string public name;\\n\\n    EnumerableSet.AddressSet private collateralSet;\\n    EnumerableSet.AddressSet private operators;\\n\\n    mapping(address => uint256) public collateral;\\n\\n    uint256 public debt;\\n\\n    modifier onlyVaultOwner() {\\n        require(_msgSender() == vaultOwner, \\\"only-vault-owner\\\");\\n        _;\\n    }\\n\\n    constructor(address _factory, address _vaultOwner, string memory _name) {\\n        require(_vaultOwner != address(0x0), \\\"vault-owner-is-0\\\");\\n        require(bytes(_name).length > 0, \\\"name-is-empty\\\");\\n        require(_factory != address(0x0), \\\"factory-is-0\\\");\\n\\n        factory = _factory;\\n        vaultOwner = _vaultOwner;\\n        stable = IVaultFactory(factory).stable();\\n        name = _name;\\n    }\\n\\n    function transferVaultOwnership(address _newOwner) external onlyFactory {\\n        vaultOwner = _newOwner;\\n    }\\n\\n    function setName(string memory _name) external onlyVaultOwner {\\n        require(bytes(_name).length > 0, \\\"name-is-empty\\\");\\n        name = _name;\\n    }\\n\\n    function addOperator(address _operator) external onlyVaultOwner {\\n        require(_operator != address(0x0), \\\"operator-is-0\\\");\\n        operators.add(_operator);\\n    }\\n\\n    function removeOperator(address _operator) external onlyVaultOwner {\\n        require(_operator != address(0x0), \\\"operator-is-0\\\");\\n        operators.remove(_operator);\\n    }\\n\\n    function isOperator(address _operator) external view returns (bool) {\\n        return operators.contains(_operator);\\n    }\\n\\n    function operatorsLength() external view returns (uint256) {\\n        return operators.length();\\n    }\\n\\n    function operatorAt(uint256 _index) external view returns (address) {\\n        return operators.at(_index);\\n    }\\n\\n    function containsCollateral(address _collateral) external view returns (bool) {\\n        return collateralSet.contains(_collateral);\\n    }\\n\\n    function collateralsLength() external view returns (uint256) {\\n        return collateralSet.length();\\n    }\\n\\n    function collateralAt(uint256 _index) external view returns (address) {\\n        return collateralSet.at(_index);\\n    }\\n\\n    function collaterals() external view returns (address[] memory) {\\n        address[] memory _collaterals = new address[](collateralSet.length());\\n        for (uint256 i = 0; i < collateralSet.length(); i++) {\\n            _collaterals[i] = collateralSet.at(i);\\n        }\\n        return _collaterals;\\n    }\\n\\n    function addCollateral(address _collateral, uint256 _amount) external onlyFactory {\\n        require(_collateral != address(0x0), \\\"collateral-is-0\\\");\\n        require(_amount > 0, \\\"amount-is-0\\\");\\n\\n        collateralSet.add(_collateral);\\n        uint256 _maxTokens = IVaultFactory(factory).MAX_TOKENS_PER_VAULT();\\n        require(collateralSet.length() <= _maxTokens, \\\"max-tokens-reached\\\");\\n\\n        collateral[_collateral] += _amount;\\n\\n        emit CollateralAdded(_collateral, _amount, collateral[_collateral]);\\n    }\\n\\n    function removeCollateral(address _collateral, uint256 _amount, address _to) external onlyFactory {\\n        require(_collateral != address(0x0), \\\"collateral-is-0\\\");\\n        require(_amount > 0, \\\"amount-is-0\\\");\\n\\n        collateral[_collateral] -= _amount;\\n        if (collateral[_collateral] == 0) {\\n            collateralSet.remove(_collateral);\\n        }\\n\\n        uint256 _healthFactor = healthFactor(false);\\n        require(_healthFactor >= DECIMAL_PRECISION, \\\"health-factor-below-1\\\");\\n\\n        IERC20(_collateral).safeTransfer(_to, _amount);\\n\\n        emit CollateralRemoved(_collateral, _amount, collateral[_collateral]);\\n    }\\n\\n    function addBadDebt(uint256 _amount) external onlyFactory {\\n        require(_amount > 0, \\\"amount-is-0\\\");\\n\\n        debt += _amount;\\n        emit DebtAdded(_amount, debt);\\n    }\\n\\n    function borrowable() public view returns (uint256 _maxBorrowable, uint256 _borrowable) {\\n        (_maxBorrowable, _borrowable) = borrowableWithDiff(address(0x0), 0, false, false);\\n    }\\n\\n    function borrow(uint256 _amount) external onlyFactory {\\n        require(_amount > 0, \\\"amount-is-0\\\");\\n\\n        (uint256 _maxBorrowable, uint256 _borrowable) = borrowable();\\n        require(_amount <= _borrowable, \\\"not-enough-borrowable\\\");\\n\\n        debt += _amount;\\n        require(debt <= _maxBorrowable, \\\"max-borrowable-reached\\\");\\n\\n        emit DebtAdded(_amount, debt);\\n    }\\n\\n    function repay(uint256 _amount) external onlyFactory {\\n        require(_amount <= debt, \\\"amount-exceeds-debt\\\");\\n\\n        debt -= _amount;\\n        emit DebtRepaid(_amount, debt);\\n    }\\n\\n    function calcRedeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    ) public view returns (uint256 _stableAmountNeeded, uint256 _redemptionFee) {\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(IVaultFactory(factory).priceFeed());\\n        uint256 _price = _priceFeed.tokenPrice(_collateral);\\n\\n        uint256 _normalizedCollateralAmount = _collateralAmount * (10 ** (18 - _priceFeed.decimals(_collateral)));\\n        _stableAmountNeeded = (_normalizedCollateralAmount * _price) / DECIMAL_PRECISION;\\n        //_stableAmountNeeded = (_stableAmountNeeded > debt) ? debt : _stableAmountNeeded;\\n\\n        uint256 _redemptionRate = IVaultFactoryConfig(factory).redemptionRate();\\n        _redemptionFee = (_stableAmountNeeded * _redemptionRate) / DECIMAL_PRECISION;\\n    }\\n\\n    function redeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    ) external onlyFactory returns (uint256 _debtRepaid, uint256 _feeCollected) {\\n        require(_collateral != address(0x0), \\\"collateral-is-0\\\");\\n        require(_collateralAmount > 0, \\\"amount-is-0\\\");\\n        require(collateralSet.contains(_collateral), \\\"collateral-not-added\\\");\\n        require(collateral[_collateral] >= _collateralAmount, \\\"not-enough-collateral\\\");\\n\\n        collateral[_collateral] -= _collateralAmount;\\n        (_debtRepaid, _feeCollected) = calcRedeem(_collateral, _collateralAmount);\\n        debt -= _debtRepaid;\\n\\n        if (collateral[_collateral] == 0) {\\n            collateralSet.remove(_collateral);\\n        }\\n\\n        IERC20(_collateral).safeTransfer(_msgSender(), _collateralAmount);\\n\\n        emit CollateralRedeemed(_collateral, _collateralAmount, collateral[_collateral], _debtRepaid, _feeCollected);\\n        emit DebtRepaid(_debtRepaid, debt);\\n    }\\n\\n    function healthFactor(bool _useMlr) public view returns (uint256 _healthFactor) {\\n        if (debt == 0) {\\n            return type(uint256).max;\\n        }\\n\\n        (uint256 _maxBorrowable, ) = borrowableWithDiff(address(0x0), 0, false, _useMlr);\\n\\n        _healthFactor = (_maxBorrowable * DECIMAL_PRECISION) / debt;\\n    }\\n\\n    function newHealthFactor(uint256 _newDebt, bool _useMlr) public view returns (uint256 _newHealthFactor) {\\n        if (_newDebt == 0) {\\n            return type(uint256).max;\\n        }\\n\\n        (uint256 _maxBorrowable, ) = borrowableWithDiff(address(0x0), 0, false, _useMlr);\\n        _newHealthFactor = (_maxBorrowable * DECIMAL_PRECISION) / _newDebt;\\n    }\\n\\n    function borrowableWithDiff(\\n        address _collateral,\\n        uint256 _diffAmount,\\n        bool _isAdd,\\n        bool _useMlr\\n    ) public view returns (uint256 _maxBorrowable, uint256 _borrowable) {\\n        uint256 _newCollateralAmount = collateral[_collateral];\\n        uint256 _borrowableAmount = 0;\\n\\n        if (_collateral != address(0x0)) {\\n            require(IVaultFactory(factory).isCollateralSupported(_collateral), \\\"collateral-not-supported\\\");\\n            if (_isAdd) {\\n                _newCollateralAmount += _diffAmount;\\n            } else {\\n                _newCollateralAmount -= _diffAmount;\\n            }\\n        }\\n\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(IVaultFactory(factory).priceFeed());\\n\\n        for (uint256 i = 0; i < collateralSet.length(); i++) {\\n            address _c = collateralSet.at(i);\\n            uint256 _collateralAmount = _c == _collateral ? _newCollateralAmount : collateral[_c];\\n            uint256 _price = _priceFeed.tokenPrice(_c);\\n            uint256 _divisor = _useMlr ? _priceFeed.mlr(_c) : _priceFeed.mcr(_c);\\n            uint256 _normalizedCollateralAmount = _collateralAmount * (10 ** (18 - _priceFeed.decimals(_c)));\\n            uint256 _collateralBorrowable = (_normalizedCollateralAmount * _price) / DECIMAL_PRECISION;\\n            _borrowableAmount += (_collateralBorrowable * DECIMAL_PRECISION) / _divisor;\\n        }\\n\\n        return (_borrowableAmount, (_borrowableAmount > debt) ? _borrowableAmount - debt : 0);\\n    }\\n\\n    function liquidate() external onlyFactory returns (uint256 _forgivenDebt) {\\n        require(healthFactor(true) < DECIMAL_PRECISION, \\\"liquidation-factor-above-1\\\");\\n\\n        uint256 _debt = debt;\\n        debt = 0;\\n        ILiquidationRouter router = ILiquidationRouter(IVaultFactory(factory).liquidationRouter());\\n        for (uint256 i = 0; i < collateralSet.length(); i++) {\\n            address _collateral = collateralSet.at(i);\\n            uint256 _collateralAmount = collateral[_collateral];\\n            uint256 _actualCollateralBalance = IERC20(_collateral).balanceOf(address(this));\\n            if (_actualCollateralBalance < _collateralAmount) {\\n                _collateralAmount = _actualCollateralBalance;\\n            }\\n            collateral[_collateral] = 0;\\n\\n            IERC20(_collateral).safeApprove(IVaultFactory(factory).liquidationRouter(), 0);\\n            IERC20(_collateral).safeApprove(IVaultFactory(factory).liquidationRouter(), type(uint256).max);\\n\\n            router.addSeizedCollateral(_collateral, _collateralAmount);\\n        }\\n        router.addUnderWaterDebt(address(this), _debt);\\n        router.tryLiquidate();\\n        _forgivenDebt = _debt;\\n    }\\n}\\n\",\"keccak256\":\"0xa7443e79fc175f1e11f2eb12ff200cb6f7dfed7cbb8d76d95a5a85bc8ea01e21\",\"license\":\"BUSL-1.1\"},\"contracts/VaultDeployer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"./Vault.sol\\\";\\n\\ncontract VaultDeployer {\\n\\n    function deployVault(address _factory, address _vaultOwner, string memory _name) external returns (address) {\\n        Vault vault = new Vault(_factory, _vaultOwner, _name);\\n        return address(vault);\\n    }\\n\\n}\",\"keccak256\":\"0x94e8dc76dc9bda9c50e7a24f7a0d04664256d236cb5130e6a0ecc974ca551469\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidationRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ILiquidationRouter {\\n    function addSeizedCollateral(address _collateral, uint256 _amount) external;\\n\\n    function addUnderWaterDebt(address _vault, uint256 _amount) external;\\n\\n    function removeUnderWaterDebt(uint256 _amount) external;\\n\\n    function underWaterDebt() external view returns (uint256);\\n\\n    function collaterals() external view returns (address[] memory);\\n\\n    function collateral(address _collateral) external view returns (uint256);\\n\\n    function tryLiquidate() external;\\n\\n    function stabilityPool() external view returns (address);\\n    function auctionManager() external view returns (address);\\n    function lastResortLiquidation() external view returns (address);\\n    function distributeBadDebt(address _vault, uint256 _amount) external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x39ecb5fde25314cbe92bbca9fab7903ec4cd96f9b10d6fce0a5810aec8a28586\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x955ead6c2a923863ba607a752e4a9924ab4fe4d07dd6cf09e5f68d0bece11049\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IPriceFeed {\\n  function token() external view returns (address);\\n\\n  function price() external view returns (uint256);\\n\\n  function pricePoint() external view returns (uint256);\\n\\n  function emitPriceSignal() external;\\n\\n  event PriceUpdate(address token, uint256 price, uint256 average);\\n}\\n\",\"keccak256\":\"0x57a011d8bc429249a622be078f750d045d2d9a1bb0b153968848cc8895eb02b3\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenPriceFeed.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface ITokenPriceFeed is IOwnable {\\n    struct TokenInfo {\\n        address priceFeed;\\n        uint256 mcr; // Minimum Collateralization Ratio\\n        uint256 mlr; // Minimum Liquidation Ratio\\n        uint256 borrowRate;\\n        uint256 decimals;\\n    }\\n\\n    function tokenPriceFeed(address) external view returns (address);\\n\\n    function tokenPrice(address _token) external view returns (uint256);\\n\\n    function mcr(address _token) external view returns (uint256);\\n\\n    function decimals(address _token) external view returns (uint256);\\n\\n    function mlr(address _token) external view returns (uint256);\\n\\n    function borrowRate(address _token) external view returns (uint256);\\n\\n    function setTokenPriceFeed(address _token, address _priceFeed, uint256 _mcr, uint256 _mlr, uint256 _borrowRate, uint256 _decimals) external;\\n\\n    event NewTokenPriceFeed(\\n        address _token,\\n        address _priceFeed,\\n        string _name,\\n        string _symbol,\\n        uint256 _mcr,\\n        uint256 _mlr,\\n        uint256 _borrowRate,\\n        uint256 _decimals\\n    );\\n}\\n\",\"keccak256\":\"0xbc40f3c92c4f7a12a4a053d372c7c8621b16e104c0b0d3c20ddf6d8950aa6b90\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IVaultFactory {\\n    event NewVault(address indexed vault, string name, address indexed owner);\\n    event PriceFeedUpdated(address indexed priceFeed);\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function vaultCount() external view returns (uint256);\\n    function lastVault() external view returns (address);\\n    function firstVault() external view returns (address);\\n    function nextVault(address _vault) external view returns (address);\\n    function prevVault(address _vault) external view returns (address);\\n    function liquidationRouter() external view returns (address);\\n    function MAX_TOKENS_PER_VAULT() external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function transferVaultOwnership(address _vault, address _newOwner) external;\\n    function createVault(string memory _name) external returns (address);\\n    function addCollateralNative(address _vault) external payable;\\n    function removeCollateralNative(address _vault, uint256 _amount, address _to) external;\\n    function addCollateral(address _vault, address _collateral, uint256 _amount) external;\\n    function removeCollateral(address _vault, address _collateral, uint256 _amount, address _to) external;\\n    function borrow(address _vault, uint256 _amount, address _to) external;\\n    function distributeBadDebt(address _vault, uint256 _amount) external;\\n    function closeVault(address _vault) external;\\n    function repay(address _vault, uint256 _amount) external;\\n    function redeem(address _vault, address _collateral, uint256 _collateralAmount, address _to) external;\\n    function liquidate(address _vault) external;\\n    function isLiquidatable(address _vault) external view returns (bool);\\n    function isReedemable(address _vault, address _collateral) external view returns (bool);\\n    function containsVault(address _vault) external view returns (bool);\\n    function stable() external view returns (address);\\n    function isCollateralSupported(address _collateral) external view returns (bool);\\n    function vaultsByOwnerLength(address _owner) external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x2d7245f166e18b43f804a62264391432008a204d43920f6ac000fb41657f169b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IVaultFactoryConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IVaultFactoryConfig {\\n    event PriceFeedUpdated(address indexed priceFeed);\\n    event MaxTokensPerVaultUpdated(uint256 oldMaxTokensPerVault, uint256 newMaxTokensPerVault);\\n    event RedemptionRateUpdated(uint256 oldRedemptionRate, uint256 newRedemptionRate);\\n    event BorrowRateUpdated(uint256 oldBorrowRate, uint256 newBorrowRate);\\n    event RedemptionHealthFactorLimitUpdated(uint256 oldRedemptionHealthFactorLimit, uint256 newRedemptionHealthFactorLimit);\\n\\n    function setMaxTokensPerVault(uint256 _maxTokensPerVault) external;\\n    function setPriceFeed(address _priceFeed) external;\\n    function setRedemptionRate(uint256 _redemptionRate) external;\\n    function setBorrowRate(uint256 _borrowRate) external;\\n    function setRedemptionHealthFactorLimit(uint256 _redemptionHealthFactorLimit) external;\\n    function setBorrowFeeRecipient(address _borrowFeeRecipient) external;\\n    function setRedemptionFeeRecipient(address _redemptionFeeRecipient) external;\\n\\n    function priceFeed() external view returns (address);\\n    function MAX_TOKENS_PER_VAULT() external view returns (uint256);\\n    function redemptionRate() external view returns (uint256);\\n    function borrowRate() external view returns (uint256);\\n    function redemptionHealthFactorLimit() external view returns (uint256);\\n    function borrowFeeRecipient() external view returns (address);\\n    function redemptionFeeRecipient() external view returns (address);\\n}\",\"keccak256\":\"0xc79a241d4206b296d9443b1ba262d164ac57a9da42046be9242052586a3a5243\",\"license\":\"BUSL-1.1\"},\"contracts/utils/constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract Constants {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant LIQUIDATION_RESERVE = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant PERCENT = (DECIMAL_PRECISION * 1) / 100; // 1%\\n  uint256 public constant PERCENT10 = PERCENT * 10; // 10%\\n  uint256 public constant PERCENT_05 = PERCENT / 2; // 0.5%\\n\\n  uint256 public constant MAX_BORROWING_RATE = (DECIMAL_PRECISION * 5) / 100; // 5%\\n  uint256 public constant MAX_REDEMPTION_RATE = (DECIMAL_PRECISION * 1) / 100; // 1%\\n\\n}\\n\",\"keccak256\":\"0xd86e0015d9180d99864bdf3b0f512e8054d98e7e68e61ac081facedccffb4378\",\"license\":\"MIT\"},\"contracts/utils/linked-address-list.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @title implements LinkedList structure used to store/operate sorted Troves\\nlibrary LinkedAddressList {\\n  struct EntryLink {\\n    address prev;\\n    address next;\\n  }\\n\\n  struct List {\\n    address _last;\\n    address _first;\\n    uint256 _size;\\n    mapping(address => EntryLink) _values;\\n  }\\n\\n  function add(\\n    List storage _list,\\n    address _element,\\n    address _reference,\\n    bool _before\\n  ) internal returns (bool) {\\n    require(\\n      _reference == address(0x0) || _list._values[_reference].next != address(0x0),\\n      \\\"79d3d _ref neither valid nor 0x\\\"\\n    );\\n    // the lement must not exist in order to be added\\n    EntryLink storage element_values = _list._values[_element];\\n    if (element_values.prev == address(0x0)) {\\n      // the list is empty\\n      if (_list._last == address(0x0)) {\\n        // if it is the first element in the list, it refers to itself to indicate this\\n        element_values.prev = _element;\\n        element_values.next = _element;\\n        // the new element is now officially the first\\n        _list._first = _element;\\n        // the new element is now officially the last\\n        _list._last = _element;\\n      } else {\\n        if (_before && (_reference == address(0x0) || _reference == _list._first)) {\\n          // the element should be added as the first element\\n          address first = _list._first;\\n          _list._values[first].prev = _element;\\n          element_values.prev = _element;\\n          element_values.next = first;\\n          _list._first = _element;\\n        } else if (!_before && (_reference == address(0x0) || _reference == _list._last)) {\\n          // the element should be added as the last element\\n          address last = _list._last;\\n          _list._values[last].next = _element;\\n          element_values.prev = last;\\n          element_values.next = _element;\\n          _list._last = _element;\\n        } else {\\n          // the element should be inserted in between two elements\\n          EntryLink memory ref = _list._values[_reference];\\n          if (_before) {\\n            element_values.prev = ref.prev;\\n            element_values.next = _reference;\\n            _list._values[_reference].prev = _element;\\n            _list._values[ref.prev].next = _element;\\n          } else {\\n            element_values.prev = _reference;\\n            element_values.next = ref.next;\\n            _list._values[_reference].next = _element;\\n            _list._values[ref.next].prev = _element;\\n          }\\n        }\\n      }\\n      _list._size = _list._size + 1;\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  function remove(List storage _list, address _element) internal returns (bool) {\\n    EntryLink memory element_values = _list._values[_element];\\n    if (element_values.next != address(0x0)) {\\n      if (_element == _list._last && _element == _list._first) {\\n        // it is the last element in the list\\n        delete _list._last;\\n        delete _list._first;\\n      } else if (_element == _list._first) {\\n        // simplified process for removing the first element\\n        address next = element_values.next;\\n        _list._values[next].prev = next;\\n        _list._first = next;\\n      } else if (_element == _list._last) {\\n        // simplified process for removing the last element\\n        address new_list_last = element_values.prev;\\n        _list._last = new_list_last;\\n        _list._values[new_list_last].next = new_list_last;\\n      } else {\\n        // set the previous and next to point to each other\\n        address next = element_values.next;\\n        address prev = element_values.prev;\\n        _list._values[next].prev = prev;\\n        _list._values[prev].next = next;\\n      }\\n      // in any case, delete the element itself\\n      delete _list._values[_element];\\n      _list._size = _list._size - 1;\\n      return true;\\n    }\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0x75d3ac9752e4d9270641e423029a31dec6f70f8f4224736deb30d8243b2ab260\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613662806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631233d5f414610030575b600080fd5b61004361003e366004610115565b61006c565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60008084848460405161007e906100b0565b61008a939291906101e7565b604051809103906000f0801580156100a6573d6000803e3d6000fd5b5095945050505050565b6133cd8061026083390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146100e157600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060006060848603121561012a57600080fd5b610133846100bd565b9250610141602085016100bd565b9150604084013567ffffffffffffffff8082111561015e57600080fd5b818601915086601f83011261017257600080fd5b813581811115610184576101846100e6565b604051601f8201601f19908116603f011681019083821181831017156101ac576101ac6100e6565b816040528281528960208487010111156101c557600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600073ffffffffffffffffffffffffffffffffffffffff8086168352602081861681850152606060408501528451915081606085015260005b8281101561023c57858101820151858201608001528101610220565b50506000608082850101526080601f19601f83011684010191505094935050505056fe60c06040523480156200001157600080fd5b50604051620033cd380380620033cd8339810160408190526200003491620001ee565b6001600160a01b038216620000835760405162461bcd60e51b815260206004820152601060248201526f07661756c742d6f776e65722d69732d360841b60448201526064015b60405180910390fd5b6000815111620000c65760405162461bcd60e51b815260206004820152600d60248201526c6e616d652d69732d656d70747960981b60448201526064016200007a565b6001600160a01b0383166200010d5760405162461bcd60e51b815260206004820152600c60248201526b0666163746f72792d69732d360a41b60448201526064016200007a565b6001600160a01b0383811660a0819052600080546001600160a01b03191692851692909217909155604080516322be3de160e01b815290516322be3de1916004808201926020929091908290030181865afa15801562000171573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001979190620002e8565b6001600160a01b03166080526001620001b182826200039c565b5050505062000468565b80516001600160a01b0381168114620001d357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156200020457600080fd5b6200020f84620001bb565b9250602062000220818601620001bb565b60408601519093506001600160401b03808211156200023e57600080fd5b818701915087601f8301126200025357600080fd5b815181811115620002685762000268620001d8565b604051601f8201601f19908116603f01168101908382118183101715620002935762000293620001d8565b816040528281528a86848701011115620002ac57600080fd5b600093505b82841015620002d05784840186015181850187015292850192620002b1565b60008684830101528096505050505050509250925092565b600060208284031215620002fb57600080fd5b6200030682620001bb565b9392505050565b600181811c908216806200032257607f821691505b6020821081036200034357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200039757600081815260208120601f850160051c81016020861015620003725750805b601f850160051c820191505b8181101562000393578281556001016200037e565b5050505b505050565b81516001600160401b03811115620003b857620003b8620001d8565b620003d081620003c984546200030d565b8462000349565b602080601f831160018114620004085760008415620003ef5750858301515b600019600386901b1c1916600185901b17855562000393565b600085815260208120601f198616915b82811015620004395788860151825594840194600190910190840162000418565b5085821015620004585787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051612ecf620004fe600039600081816104ec0152818161066c0152818161097401528181610a4b01528181610bc201528181610c5901528181610e6501528181610f760152818161127b0152818161137e01528181611478015281816116330152818161171201528181611c5301528181611df801528181611fa90152612158015260006103530152612ecf6000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c80636d75b9ee11610160578063ad09014d116100d8578063c47f00271161008c578063e071c0ca11610071578063e071c0ca14610534578063e99a6ac714610547578063ffa1ad741461054f57600080fd5b8063c47f00271461050e578063c5ebeaec1461052157600080fd5b8063b8911267116100bd578063b8911267146104c1578063c3f7e0b7146104d4578063c45a0155146104e757600080fd5b8063ad09014d146104b9578063b85a8b20146103dd57600080fd5b8063a20baee61161012f578063abdc554111610114578063abdc554114610496578063ac8a584a1461049e578063aceb2d04146104b157600080fd5b8063a20baee614610454578063a5fdc5de1461047657600080fd5b80636d75b9ee1461042e5780638a1bcd7714610441578063923c1eec146104545780639870d7fe1461046357600080fd5b806328a070251161020e5780634ba2ad45116101c25780634bfc894d116101a75780634bfc894d146103e55780636b5bc994146104085780636d70f7ae1461041b57600080fd5b80634ba2ad45146103d55780634bb97042146103dd57600080fd5b8063371fd8e6116101f3578063371fd8e6146103985780633879b0c5146103ad5780634113e5ca146103c057600080fd5b806328a070251461038857806329ad2fb21461039057600080fd5b80631e9a6950116102655780631f6656461161024a5780631f6656461461033b57806322be3de11461034e578063261423351461037557600080fd5b80631e9a6950146102e85780631f52692b1461031057600080fd5b806306fdde0314610297578063098d3228146102b557806309d3655d146102cc5780630dca59c1146102df575b600080fd5b61029f61058b565b6040516102ac919061288d565b60405180910390f35b6102be60001981565b6040519081526020016102ac565b6102be6102da3660046128d1565b610619565b6102be60075481565b6102fb6102f6366004612916565b610666565b604080519283526020830191909152016102ac565b600054610323906001600160a01b031681565b6040516001600160a01b0390911681526020016102ac565b610323610349366004612942565b610955565b6103237f000000000000000000000000000000000000000000000000000000000000000081565b610323610383366004612942565b610962565b6102be61096f565b6102be610e51565b6103ab6103a6366004612942565b610e62565b005b6103ab6103bb36600461295b565b610f73565b6103c861118a565b6040516102ac919061299d565b6102be61123d565b6102be611249565b6103f86103f33660046129ea565b61126b565b60405190151581526020016102ac565b6103ab610416366004612942565b611278565b6103f86104293660046129ea565b61136e565b6103ab61043c366004612916565b61137b565b6102fb61044f366004612a07565b6115d6565b6102be670de0b6b3a764000081565b6103ab6104713660046129ea565b611a9a565b6102be6104843660046129ea565b60066020526000908152604090205481565b6102be611b45565b6103ab6104ac3660046129ea565b611b5a565b6102be611c01565b6102be611c22565b6102fb6104cf366004612916565b611c4c565b6102be6104e2366004612a5a565b611ea4565b6103237f000000000000000000000000000000000000000000000000000000000000000081565b6103ab61051c366004612a8d565b611ef3565b6103ab61052f366004612942565b611fa6565b6103ab6105423660046129ea565b612155565b6102fb6121f6565b61029f6040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6001805461059890612b3e565b80601f01602080910402602001604051908101604052809291908181526020018280546105c490612b3e565b80156106115780601f106105e657610100808354040283529160200191610611565b820191906000526020600020905b8154815290600101906020018083116105f457829003601f168201915b505050505081565b60008260000361062c5750600019610660565b600061063c6000806000866115d6565b50905083610652670de0b6b3a764000083612b88565b61065c9190612b9f565b9150505b92915050565b600080337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106d55760405162461bcd60e51b815260206004820152600c60248201526b6f6e6c792d666163746f727960a01b60448201526064015b60405180910390fd5b6001600160a01b03841661071d5760405162461bcd60e51b815260206004820152600f60248201526e0636f6c6c61746572616c2d69732d3608c1b60448201526064016106cc565b6000831161075b5760405162461bcd60e51b815260206004820152600b60248201526a0616d6f756e742d69732d360ac1b60448201526064016106cc565b610766600285612210565b6107b25760405162461bcd60e51b815260206004820152601460248201527f636f6c6c61746572616c2d6e6f742d616464656400000000000000000000000060448201526064016106cc565b6001600160a01b03841660009081526006602052604090205483111561081a5760405162461bcd60e51b815260206004820152601560248201527f6e6f742d656e6f7567682d636f6c6c61746572616c000000000000000000000060448201526064016106cc565b6001600160a01b03841660009081526006602052604081208054859290610842908490612bc1565b9091555061085290508484611c4c565b8092508193505050816007600082825461086c9190612bc1565b90915550506001600160a01b038416600090815260066020526040812054900361089d5761089b600285612232565b505b6108b16001600160a01b0385163385612247565b6001600160a01b03841660008181526006602090815260409182902054825187815291820152908101849052606081018390527fe3c5362354987ae7844588482f3912d58e2cb3ffa7d04a1d3025c99fa996d5259060800160405180910390a26007546040805184815260208101929092527f0d4979b0859a1951f8ed7cbe3b1994e740552588f27ba02ca0f8f1ddcad16e0c910160405180910390a19250929050565b60006106606002836122f5565b60006106606004836122f5565b6000337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146109d85760405162461bcd60e51b815260206004820152600c60248201526b6f6e6c792d666163746f727960a01b60448201526064016106cc565b670de0b6b3a76400006109eb6001611ea4565b10610a385760405162461bcd60e51b815260206004820152601a60248201527f6c69717569646174696f6e2d666163746f722d61626f76652d3100000000000060448201526064016106cc565b60006007549050600060078190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663679fda706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acb9190612bd4565b905060005b610ada6002612301565b811015610d7d576000610aee6002836122f5565b6001600160a01b0381166000818152600660205260408082205490517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152939450929091906370a0823190602401602060405180830381865afa158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b849190612bf1565b905081811015610b92578091505b600060066000856001600160a01b03166001600160a01b0316815260200190815260200160002081905550610c547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663679fda706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c429190612bd4565b6001600160a01b03851690600061230b565b610cec7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663679fda706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd99190612bd4565b6001600160a01b0385169060001961230b565b6040517fb7017b910000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820184905286169063b7017b9190604401600060405180830381600087803b158015610d4f57600080fd5b505af1158015610d63573d6000803e3d6000fd5b505050505050508080610d7590612c0a565b915050610ad0565b506040517f2fb04272000000000000000000000000000000000000000000000000000000008152306004820152602481018390526001600160a01b03821690632fb0427290604401600060405180830381600087803b158015610ddf57600080fd5b505af1158015610df3573d6000803e3d6000fd5b50505050806001600160a01b031663a0c03a366040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e3257600080fd5b505af1158015610e46573d6000803e3d6000fd5b509395945050505050565b6000610e5d6002612301565b905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ec95760405162461bcd60e51b815260206004820152600c60248201526b6f6e6c792d666163746f727960a01b60448201526064016106cc565b600754811115610f1b5760405162461bcd60e51b815260206004820152601360248201527f616d6f756e742d657863656564732d646562740000000000000000000000000060448201526064016106cc565b8060076000828254610f2d9190612bc1565b90915550506007546040805183815260208101929092527f0d4979b0859a1951f8ed7cbe3b1994e740552588f27ba02ca0f8f1ddcad16e0c91015b60405180910390a150565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610fda5760405162461bcd60e51b815260206004820152600c60248201526b6f6e6c792d666163746f727960a01b60448201526064016106cc565b6001600160a01b0383166110225760405162461bcd60e51b815260206004820152600f60248201526e0636f6c6c61746572616c2d69732d3608c1b60448201526064016106cc565b600082116110605760405162461bcd60e51b815260206004820152600b60248201526a0616d6f756e742d69732d360ac1b60448201526064016106cc565b6001600160a01b03831660009081526006602052604081208054849290611088908490612bc1565b90915550506001600160a01b03831660009081526006602052604081205490036110b9576110b7600284612232565b505b60006110c56000611ea4565b9050670de0b6b3a764000081101561111f5760405162461bcd60e51b815260206004820152601560248201527f6865616c74682d666163746f722d62656c6f772d31000000000000000000000060448201526064016106cc565b6111336001600160a01b0385168385612247565b6001600160a01b038416600081815260066020908152604091829020548251878152918201527f47e1336b6fdb5f42c3a1d28b558fa98786d820c3705d726358dcc8e63a401eef910160405180910390a250505050565b606060006111986002612301565b67ffffffffffffffff8111156111b0576111b0612a77565b6040519080825280602002602001820160405280156111d9578160200160208202803683370190505b50905060005b6111e96002612301565b811015611237576111fb6002826122f5565b82828151811061120d5761120d612c23565b6001600160a01b03909216602092830291909101909101528061122f81612c0a565b9150506111df565b50919050565b6000610e5d6004612301565b606461125e670de0b6b3a76400006001612b88565b6112689190612b9f565b81565b6000610660600283612210565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146112df5760405162461bcd60e51b815260206004820152600c60248201526b6f6e6c792d666163746f727960a01b60448201526064016106cc565b6000811161131d5760405162461bcd60e51b815260206004820152600b60248201526a0616d6f756e742d69732d360ac1b60448201526064016106cc565b806007600082825461132f9190612c39565b90915550506007546040805183815260208101929092527f28c388e35418553e43dc360d4b6b01207242898c8e48fb1a12d9073c0579be6c9101610f68565b6000610660600483612210565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146113e25760405162461bcd60e51b815260206004820152600c60248201526b6f6e6c792d666163746f727960a01b60448201526064016106cc565b6001600160a01b03821661142a5760405162461bcd60e51b815260206004820152600f60248201526e0636f6c6c61746572616c2d69732d3608c1b60448201526064016106cc565b600081116114685760405162461bcd60e51b815260206004820152600b60248201526a0616d6f756e742d69732d360ac1b60448201526064016106cc565b611473600283612459565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ffbfb8ad6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f89190612bf1565b9050806115056002612301565b11156115535760405162461bcd60e51b815260206004820152601260248201527f6d61782d746f6b656e732d72656163686564000000000000000000000000000060448201526064016106cc565b6001600160a01b0383166000908152600660205260408120805484929061157b908490612c39565b90915550506001600160a01b038316600081815260066020908152604091829020548251868152918201527f11f8990ac38271f23dea447d5728e9914fca7cea2edda43af6c43c415f8bc30b910160405180910390a2505050565b6001600160a01b038416600081815260066020526040812054909182919082901561170e576040517ffa6bd2ee0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063fa6bd2ee90602401602060405180830381865afa15801561167a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169e9190612c4c565b6116ea5760405162461bcd60e51b815260206004820152601860248201527f636f6c6c61746572616c2d6e6f742d737570706f72746564000000000000000060448201526064016106cc565b8515611701576116fa8783612c39565b915061170e565b61170b8783612bc1565b91505b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663741bef1a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561176e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117929190612bd4565b905060005b6117a16002612301565b811015611a6b5760006117b56002836122f5565b905060008b6001600160a01b0316826001600160a01b0316146117f0576001600160a01b0382166000908152600660205260409020546117f2565b855b6040516384ba3f6960e01b81526001600160a01b0384811660048301529192506000918616906384ba3f6990602401602060405180830381865afa15801561183e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118629190612bf1565b905060008a6118f3576040517faa41911f0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015287169063aa41911f90602401602060405180830381865afa1580156118ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ee9190612bf1565b611976565b6040517f75b785440000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528716906375b7854490602401602060405180830381865afa158015611952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119769190612bf1565b604051636a24d41960e11b81526001600160a01b03868116600483015291925060009188169063d449a83290602401602060405180830381865afa1580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e69190612bf1565b6119f1906012612bc1565b6119fc90600a612d4d565b611a069085612b88565b90506000670de0b6b3a7640000611a1d8584612b88565b611a279190612b9f565b905082611a3c670de0b6b3a764000083612b88565b611a469190612b9f565b611a50908a612c39565b98505050505050508080611a6390612c0a565b915050611797565b50816007548311611a7d576000611a8a565b600754611a8a9084612bc1565b9450945050505094509492505050565b6000546001600160a01b0316336001600160a01b031614611af05760405162461bcd60e51b815260206004820152601060248201526f37b7363c96bb30bab63a16b7bbb732b960811b60448201526064016106cc565b6001600160a01b038116611b365760405162461bcd60e51b815260206004820152600d60248201526c06f70657261746f722d69732d3609c1b60448201526064016106cc565b611b41600482612459565b5050565b606461125e670de0b6b3a76400006005612b88565b6000546001600160a01b0316336001600160a01b031614611bb05760405162461bcd60e51b815260206004820152601060248201526f37b7363c96bb30bab63a16b7bbb732b960811b60448201526064016106cc565b6001600160a01b038116611bf65760405162461bcd60e51b815260206004820152600d60248201526c06f70657261746f722d69732d3609c1b60448201526064016106cc565b611b41600482612232565b60026064611c18670de0b6b3a76400006001612b88565b61125e9190612b9f565b6064611c37670de0b6b3a76400006001612b88565b611c419190612b9f565b61126890600a612b88565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663741bef1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd39190612bd4565b6040516384ba3f6960e01b81526001600160a01b0387811660048301529192506000918316906384ba3f6990602401602060405180830381865afa158015611d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d439190612bf1565b604051636a24d41960e11b81526001600160a01b03888116600483015291925060009184169063d449a83290602401602060405180830381865afa158015611d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db39190612bf1565b611dbe906012612bc1565b611dc990600a612d4d565b611dd39087612b88565b9050670de0b6b3a7640000611de88383612b88565b611df29190612b9f565b945060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663540385a36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e789190612bf1565b9050670de0b6b3a7640000611e8d8288612b88565b611e979190612b9f565b9450505050509250929050565b6000600754600003611eb95750600019919050565b6000611ec96000806000866115d6565b50600754909150611ee2670de0b6b3a764000083612b88565b611eec9190612b9f565b9392505050565b6000546001600160a01b0316336001600160a01b031614611f495760405162461bcd60e51b815260206004820152601060248201526f37b7363c96bb30bab63a16b7bbb732b960811b60448201526064016106cc565b6000815111611f9a5760405162461bcd60e51b815260206004820152600d60248201527f6e616d652d69732d656d7074790000000000000000000000000000000000000060448201526064016106cc565b6001611b418282612da7565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461200d5760405162461bcd60e51b815260206004820152600c60248201526b6f6e6c792d666163746f727960a01b60448201526064016106cc565b6000811161204b5760405162461bcd60e51b815260206004820152600b60248201526a0616d6f756e742d69732d360ac1b60448201526064016106cc565b6000806120566121f6565b91509150808311156120aa5760405162461bcd60e51b815260206004820152601560248201527f6e6f742d656e6f7567682d626f72726f7761626c65000000000000000000000060448201526064016106cc565b82600760008282546120bc9190612c39565b90915550506007548210156121135760405162461bcd60e51b815260206004820152601660248201527f6d61782d626f72726f7761626c652d726561636865640000000000000000000060448201526064016106cc565b6007546040805185815260208101929092527f28c388e35418553e43dc360d4b6b01207242898c8e48fb1a12d9073c0579be6c910160405180910390a1505050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146121bc5760405162461bcd60e51b815260206004820152600c60248201526b6f6e6c792d666163746f727960a01b60448201526064016106cc565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000806122076000806000806115d6565b90939092509050565b6001600160a01b03811660009081526001830160205260408120541515611eec565b6000611eec836001600160a01b03841661246e565b6040516001600160a01b0383166024820152604481018290526122f09084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612561565b505050565b6000611eec8383612649565b6000610660825490565b80158061239e57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239c9190612bf1565b155b6124105760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016106cc565b6040516001600160a01b0383166024820152604481018290526122f09084907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161228c565b6000611eec836001600160a01b038416612673565b60008181526001830160205260408120548015612557576000612492600183612bc1565b85549091506000906124a690600190612bc1565b905081811461250b5760008660000182815481106124c6576124c6612c23565b90600052602060002001549050808760000184815481106124e9576124e9612c23565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061251c5761251c612e67565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610660565b6000915050610660565b60006125b6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126c29092919063ffffffff16565b90508051600014806125d75750808060200190518101906125d79190612c4c565b6122f05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106cc565b600082600001828154811061266057612660612c23565b9060005260206000200154905092915050565b60008181526001830160205260408120546126ba57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610660565b506000610660565b60606126d184846000856126d9565b949350505050565b6060824710156127515760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106cc565b600080866001600160a01b0316858760405161276d9190612e7d565b60006040518083038185875af1925050503d80600081146127aa576040519150601f19603f3d011682016040523d82523d6000602084013e6127af565b606091505b50915091506127c0878383876127cb565b979650505050505050565b6060831561283a578251600003612833576001600160a01b0385163b6128335760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106cc565b50816126d1565b6126d1838381511561284f5781518083602001fd5b8060405162461bcd60e51b81526004016106cc919061288d565b60005b8381101561288457818101518382015260200161286c565b50506000910152565b60208152600082518060208401526128ac816040850160208701612869565b601f01601f19169190910160400192915050565b80151581146128ce57600080fd5b50565b600080604083850312156128e457600080fd5b8235915060208301356128f6816128c0565b809150509250929050565b6001600160a01b03811681146128ce57600080fd5b6000806040838503121561292957600080fd5b823561293481612901565b946020939093013593505050565b60006020828403121561295457600080fd5b5035919050565b60008060006060848603121561297057600080fd5b833561297b81612901565b925060208401359150604084013561299281612901565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156129de5783516001600160a01b0316835292840192918401916001016129b9565b50909695505050505050565b6000602082840312156129fc57600080fd5b8135611eec81612901565b60008060008060808587031215612a1d57600080fd5b8435612a2881612901565b9350602085013592506040850135612a3f816128c0565b91506060850135612a4f816128c0565b939692955090935050565b600060208284031215612a6c57600080fd5b8135611eec816128c0565b634e487b7160e01b600052604160045260246000fd5b600060208284031215612a9f57600080fd5b813567ffffffffffffffff80821115612ab757600080fd5b818401915084601f830112612acb57600080fd5b813581811115612add57612add612a77565b604051601f8201601f19908116603f01168101908382118183101715612b0557612b05612a77565b81604052828152876020848701011115612b1e57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c90821680612b5257607f821691505b60208210810361123757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761066057610660612b72565b600082612bbc57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561066057610660612b72565b600060208284031215612be657600080fd5b8151611eec81612901565b600060208284031215612c0357600080fd5b5051919050565b600060018201612c1c57612c1c612b72565b5060010190565b634e487b7160e01b600052603260045260246000fd5b8082018082111561066057610660612b72565b600060208284031215612c5e57600080fd5b8151611eec816128c0565b600181815b80851115612ca4578160001904821115612c8a57612c8a612b72565b80851615612c9757918102915b93841c9390800290612c6e565b509250929050565b600082612cbb57506001610660565b81612cc857506000610660565b8160018114612cde5760028114612ce857612d04565b6001915050610660565b60ff841115612cf957612cf9612b72565b50506001821b610660565b5060208310610133831016604e8410600b8410161715612d27575081810a610660565b612d318383612c69565b8060001904821115612d4557612d45612b72565b029392505050565b6000611eec8383612cac565b601f8211156122f057600081815260208120601f850160051c81016020861015612d805750805b601f850160051c820191505b81811015612d9f57828155600101612d8c565b505050505050565b815167ffffffffffffffff811115612dc157612dc1612a77565b612dd581612dcf8454612b3e565b84612d59565b602080601f831160018114612e0a5760008415612df25750858301515b600019600386901b1c1916600185901b178555612d9f565b600085815260208120601f198616915b82811015612e3957888601518255948401946001909101908401612e1a565b5085821015612e575787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b60008251612e8f818460208701612869565b919091019291505056fea26469706673582212202ce19673a140bdebb5c95b755c0579f7c77a5501b159bbf349085b34e0d1925c64736f6c63430008130033a264697066735822122075c780f1561c2075d1736a0b16dd735b421329e50c0f3408be1db1d56719298b64736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}