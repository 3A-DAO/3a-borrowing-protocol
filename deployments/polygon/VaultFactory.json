{
  "address": "0x4760847023fa0833221ae76E01Db1E483A5D20e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mintableTokenOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nativeWrapped",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidationRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrowRate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBorrowRate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBorrowRate",
          "type": "address"
        }
      ],
      "name": "BorrowRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCapacity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCapacity",
          "type": "uint256"
        }
      ],
      "name": "CollateralCapacityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDebtCeiling",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebtCeiling",
          "type": "uint256"
        }
      ],
      "name": "DebtCeilingUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDebtWindowSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebtWindowSize",
          "type": "uint256"
        }
      ],
      "name": "DebtWindowSizeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxDebtPerWindow",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxDebtPerWindow",
          "type": "uint256"
        }
      ],
      "name": "MaxDebtPerWindowUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxTokensPerVault",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxTokensPerVault",
          "type": "uint256"
        }
      ],
      "name": "MaxTokensPerVaultUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NewVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRedemptionHealthFactorLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRedemptionHealthFactorLimit",
          "type": "uint256"
        }
      ],
      "name": "RedemptionHealthFactorLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRedemptionRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRedemptionRate",
          "type": "uint256"
        }
      ],
      "name": "RedemptionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "VaultOwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidationRouter",
          "type": "address"
        }
      ],
      "name": "liquidationRouterUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_RESERVE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_INT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_REDEMPTION_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_PER_VAULT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT10",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_05",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "addCollateralNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowRate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "closeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateralCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "containsVault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "createVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtWindowAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtWindowSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "distributeBadDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "isCollateralSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "isLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "isReedemable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDebtWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDebtPerWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintableTokenOwner",
      "outputs": [
        {
          "internalType": "contract IMintableTokenOwner",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeWrapped",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "nextVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "prevVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionHealthFactorLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "removeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "removeCollateralNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setBorrowFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowRate",
          "type": "address"
        }
      ],
      "name": "setBorrowRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setCollateralCapacity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtCeiling",
          "type": "uint256"
        }
      ],
      "name": "setDebtCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtWindowSize",
          "type": "uint256"
        }
      ],
      "name": "setDebtWindowSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidationRouter",
          "type": "address"
        }
      ],
      "name": "setLiquidationRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDebtPerWindow",
          "type": "uint256"
        }
      ],
      "name": "setMaxDebtPerWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxTokensPerVault",
          "type": "uint256"
        }
      ],
      "name": "setMaxTokensPerVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_redemptionFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setRedemptionFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_redemptionHealthFactorLimit",
          "type": "uint256"
        }
      ],
      "name": "setRedemptionHealthFactorLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_redemptionRate",
          "type": "uint256"
        }
      ],
      "name": "setRedemptionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultDeployer",
          "type": "address"
        }
      ],
      "name": "setVaultDeployer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stable",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferVaultOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "vaultsByOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "vaultsByOwnerLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8e7deeb9ed1fab3a16b1b83131d5c63938275eb4c7d46cd978322489d42b1677",
  "receipt": {
    "to": null,
    "from": "0x109861a2A539ddB151eE591588a14CF86309e4E5",
    "contractAddress": "0x4760847023fa0833221ae76E01Db1E483A5D20e0",
    "transactionIndex": 34,
    "gasUsed": "4398066",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000200000000000000000000000000000000008800000000000000800000000000000000000000000000000000000000800001000000000000000100000000080000000000020000000000000000000800000000000020000080000000000000400000000000000000000000000000000000000000000100000000000000000000200000040000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000020020000000000000000000000000000000000002000000000000000000000000100000",
    "blockHash": "0x897db4737169b980da0b0a0fb37cb829676dc15875fe057f0fb9166699b0fcd0",
    "transactionHash": "0x8e7deeb9ed1fab3a16b1b83131d5c63938275eb4c7d46cd978322489d42b1677",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 49852705,
        "transactionHash": "0x8e7deeb9ed1fab3a16b1b83131d5c63938275eb4c7d46cd978322489d42b1677",
        "address": "0x4760847023fa0833221ae76E01Db1E483A5D20e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000109861a2a539ddb151ee591588a14cf86309e4e5"
        ],
        "data": "0x",
        "logIndex": 126,
        "blockHash": "0x897db4737169b980da0b0a0fb37cb829676dc15875fe057f0fb9166699b0fcd0"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 49852705,
        "transactionHash": "0x8e7deeb9ed1fab3a16b1b83131d5c63938275eb4c7d46cd978322489d42b1677",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000109861a2a539ddb151ee591588a14cf86309e4e5",
          "0x000000000000000000000000959c65b72147faf3450d8b50a0de57e72ffc5e0d"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003cb2eaf4336bc20000000000000000000000000000000000000000000000002bb438533dfc0a8c5000000000000000000000000000000000000000000000077a6ea812127526408000000000000000000000000000000000000000000000002b77856849c89eca5000000000000000000000000000000000000000000000077aab5afd06a892028",
        "logIndex": 127,
        "blockHash": "0x897db4737169b980da0b0a0fb37cb829676dc15875fe057f0fb9166699b0fcd0"
      }
    ],
    "blockNumber": 49852705,
    "cumulativeGasUsed": "8945276",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB3857F86A95516902C953D530D3E5C29B1518a85",
    "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270",
    "0xfBC5cfEb809c6352Bc4ef2FFe842f72a8769E45e",
    "0x6234325c353508c677701aC85e671A6A57c8fe59",
    "0x00ff66600b35428b8eb76dc622d404c7ac27a99f",
    "0x1E7224703E1B289e06F0Ff12519685fCf8E9306c"
  ],
  "numDeployments": 1,
  "solcInputHash": "d92118657e9aead9627ae1f18635314a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintableTokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeWrapped\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidationRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowRate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBorrowRate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorrowRate\",\"type\":\"address\"}],\"name\":\"BorrowRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCapacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCapacity\",\"type\":\"uint256\"}],\"name\":\"CollateralCapacityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDebtCeiling\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"DebtCeilingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDebtWindowSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtWindowSize\",\"type\":\"uint256\"}],\"name\":\"DebtWindowSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxDebtPerWindow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDebtPerWindow\",\"type\":\"uint256\"}],\"name\":\"MaxDebtPerWindowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTokensPerVault\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTokensPerVault\",\"type\":\"uint256\"}],\"name\":\"MaxTokensPerVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRedemptionHealthFactorLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedemptionHealthFactorLimit\",\"type\":\"uint256\"}],\"name\":\"RedemptionHealthFactorLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRedemptionRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedemptionRate\",\"type\":\"uint256\"}],\"name\":\"RedemptionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"VaultOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidationRouter\",\"type\":\"address\"}],\"name\":\"liquidationRouterUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REDEMPTION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_PER_VAULT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_05\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"addCollateralNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"closeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"containsVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtWindowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtWindowSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeBadDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"isCollateralSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"isReedemable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDebtWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDebtPerWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintableTokenOwner\",\"outputs\":[{\"internalType\":\"contract IMintableTokenOwner\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeWrapped\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"nextVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"prevVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionHealthFactorLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"removeCollateralNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowFeeRecipient\",\"type\":\"address\"}],\"name\":\"setBorrowFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowRate\",\"type\":\"address\"}],\"name\":\"setBorrowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setCollateralCapacity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtCeiling\",\"type\":\"uint256\"}],\"name\":\"setDebtCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtWindowSize\",\"type\":\"uint256\"}],\"name\":\"setDebtWindowSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidationRouter\",\"type\":\"address\"}],\"name\":\"setLiquidationRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDebtPerWindow\",\"type\":\"uint256\"}],\"name\":\"setMaxDebtPerWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokensPerVault\",\"type\":\"uint256\"}],\"name\":\"setMaxTokensPerVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_redemptionFeeRecipient\",\"type\":\"address\"}],\"name\":\"setRedemptionFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionHealthFactorLimit\",\"type\":\"uint256\"}],\"name\":\"setRedemptionHealthFactorLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionRate\",\"type\":\"uint256\"}],\"name\":\"setRedemptionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultDeployer\",\"type\":\"address\"}],\"name\":\"setVaultDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferVaultOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"vaultsByOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"vaultsByOwnerLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"containsVault(address)\":{\"details\":\"returns and checks if such vault exists for this token\"},\"firstVault()\":{\"details\":\"returns the first vault by minimal collaterization ratio\"},\"lastVault()\":{\"details\":\"returns the last vault by maximum collaterization ratio\"},\"nextVault(address)\":{\"details\":\"returns the next vault by collaterization ratio\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"prevVault(address)\":{\"details\":\"returns the previous vault by collaterization ratio\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"vaultCount()\":{\"details\":\"returns the number of vaults for specific token\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isReedemable(address,address)\":{\"notice\":\"Collateral with higher MCR can be redeemed first\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultFactory.sol\":\"VaultFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./interfaces/IPriceFeed.sol\\\";\\nimport \\\"./interfaces/IVaultFactory.sol\\\";\\nimport \\\"./interfaces/IVaultFactoryConfig.sol\\\";\\nimport \\\"./interfaces/ILiquidationRouter.sol\\\";\\n\\nimport \\\"./utils/constants.sol\\\";\\nimport \\\"./interfaces/ITokenPriceFeed.sol\\\";\\nimport \\\"./utils/linked-address-list.sol\\\";\\n\\ncontract Vault is Context, Constants {\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    event CollateralAdded(address indexed collateral, uint256 amount, uint256 newTotalAmount);\\n    event CollateralRemoved(address indexed collateral, uint256 amount, uint256 newTotalAmount);\\n    event CollateralRedeemed(\\n        address indexed collateral,\\n        uint256 amount,\\n        uint256 newTotalAmount,\\n        uint256 stableAmountUsed,\\n        uint256 feePaid\\n    );\\n\\n    event DebtAdded(uint256 amount, uint256 newTotalDebt);\\n    event DebtRepaid(uint256 amount, uint256 newTotalDebt);\\n\\n    modifier onlyFactory() {\\n        require(_msgSender() == factory, \\\"only-factory\\\");\\n        _;\\n    }\\n\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address public immutable stable;\\n    address public immutable factory;\\n    address public vaultOwner;\\n\\n    string public name;\\n\\n    EnumerableSet.AddressSet private collateralSet;\\n    EnumerableSet.AddressSet private operators;\\n\\n    mapping(address => uint256) public collateral;\\n\\n    uint256 public debt;\\n\\n    modifier onlyVaultOwner() {\\n        require(_msgSender() == vaultOwner, \\\"only-vault-owner\\\");\\n        _;\\n    }\\n\\n    constructor(address _factory, address _vaultOwner, string memory _name) {\\n        require(_vaultOwner != address(0x0), \\\"vault-owner-is-0\\\");\\n        require(bytes(_name).length > 0, \\\"name-is-empty\\\");\\n        require(_factory != address(0x0), \\\"factory-is-0\\\");\\n\\n        factory = _factory;\\n        vaultOwner = _vaultOwner;\\n        stable = IVaultFactory(factory).stable();\\n        name = _name;\\n    }\\n\\n    function transferVaultOwnership(address _newOwner) external onlyFactory {\\n        vaultOwner = _newOwner;\\n    }\\n\\n    function setName(string memory _name) external onlyVaultOwner {\\n        require(bytes(_name).length > 0, \\\"name-is-empty\\\");\\n        name = _name;\\n    }\\n\\n    function addOperator(address _operator) external onlyVaultOwner {\\n        require(_operator != address(0x0), \\\"operator-is-0\\\");\\n        operators.add(_operator);\\n    }\\n\\n    function removeOperator(address _operator) external onlyVaultOwner {\\n        require(_operator != address(0x0), \\\"operator-is-0\\\");\\n        operators.remove(_operator);\\n    }\\n\\n    function isOperator(address _operator) external view returns (bool) {\\n        return operators.contains(_operator);\\n    }\\n\\n    function operatorsLength() external view returns (uint256) {\\n        return operators.length();\\n    }\\n\\n    function operatorAt(uint256 _index) external view returns (address) {\\n        return operators.at(_index);\\n    }\\n\\n    function containsCollateral(address _collateral) external view returns (bool) {\\n        return collateralSet.contains(_collateral);\\n    }\\n\\n    function collateralsLength() external view returns (uint256) {\\n        return collateralSet.length();\\n    }\\n\\n    function collateralAt(uint256 _index) external view returns (address) {\\n        return collateralSet.at(_index);\\n    }\\n\\n    function collaterals() external view returns (address[] memory) {\\n        address[] memory _collaterals = new address[](collateralSet.length());\\n        for (uint256 i = 0; i < collateralSet.length(); i++) {\\n            _collaterals[i] = collateralSet.at(i);\\n        }\\n        return _collaterals;\\n    }\\n\\n    function addCollateral(address _collateral, uint256 _amount) external onlyFactory {\\n        require(_collateral != address(0x0), \\\"collateral-is-0\\\");\\n        require(_amount > 0, \\\"amount-is-0\\\");\\n\\n        collateralSet.add(_collateral);\\n        uint256 _maxTokens = IVaultFactory(factory).MAX_TOKENS_PER_VAULT();\\n        require(collateralSet.length() <= _maxTokens, \\\"max-tokens-reached\\\");\\n\\n        collateral[_collateral] += _amount;\\n\\n        emit CollateralAdded(_collateral, _amount, collateral[_collateral]);\\n    }\\n\\n    function removeCollateral(address _collateral, uint256 _amount, address _to) external onlyFactory {\\n        require(_collateral != address(0x0), \\\"collateral-is-0\\\");\\n        require(_amount > 0, \\\"amount-is-0\\\");\\n\\n        collateral[_collateral] -= _amount;\\n        if (collateral[_collateral] == 0) {\\n            collateralSet.remove(_collateral);\\n        }\\n\\n        uint256 _healthFactor = healthFactor(false);\\n        require(_healthFactor >= DECIMAL_PRECISION, \\\"health-factor-below-1\\\");\\n\\n        IERC20(_collateral).safeTransfer(_to, _amount);\\n\\n        emit CollateralRemoved(_collateral, _amount, collateral[_collateral]);\\n    }\\n\\n    function addBadDebt(uint256 _amount) external onlyFactory {\\n        require(_amount > 0, \\\"amount-is-0\\\");\\n\\n        debt += _amount;\\n        emit DebtAdded(_amount, debt);\\n    }\\n\\n    function borrowable() public view returns (uint256 _maxBorrowable, uint256 _borrowable) {\\n        (_maxBorrowable, _borrowable) = borrowableWithDiff(address(0x0), 0, false, false);\\n    }\\n\\n    function borrow(uint256 _amount) external onlyFactory {\\n        require(_amount > 0, \\\"amount-is-0\\\");\\n\\n        (uint256 _maxBorrowable, uint256 _borrowable) = borrowable();\\n        require(_amount <= _borrowable, \\\"not-enough-borrowable\\\");\\n\\n        debt += _amount;\\n        require(debt <= _maxBorrowable, \\\"max-borrowable-reached\\\");\\n\\n        emit DebtAdded(_amount, debt);\\n    }\\n\\n    function repay(uint256 _amount) external onlyFactory {\\n        require(_amount <= debt, \\\"amount-exceeds-debt\\\");\\n\\n        debt -= _amount;\\n        emit DebtRepaid(_amount, debt);\\n    }\\n\\n    function calcRedeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    ) public view returns (uint256 _stableAmountNeeded, uint256 _redemptionFee) {\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(IVaultFactory(factory).priceFeed());\\n        uint256 _price = _priceFeed.tokenPrice(_collateral);\\n\\n        uint256 _normalizedCollateralAmount = _collateralAmount * (10 ** (18 - _priceFeed.decimals(_collateral)));\\n        _stableAmountNeeded = (_normalizedCollateralAmount * _price) / DECIMAL_PRECISION;\\n        //_stableAmountNeeded = (_stableAmountNeeded > debt) ? debt : _stableAmountNeeded;\\n\\n        uint256 _redemptionRate = IVaultFactoryConfig(factory).redemptionRate();\\n        _redemptionFee = (_stableAmountNeeded * _redemptionRate) / DECIMAL_PRECISION;\\n    }\\n\\n    function redeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    ) external onlyFactory returns (uint256 _debtRepaid, uint256 _feeCollected) {\\n        require(_collateral != address(0x0), \\\"collateral-is-0\\\");\\n        require(_collateralAmount > 0, \\\"amount-is-0\\\");\\n        require(collateralSet.contains(_collateral), \\\"collateral-not-added\\\");\\n        require(collateral[_collateral] >= _collateralAmount, \\\"not-enough-collateral\\\");\\n\\n        collateral[_collateral] -= _collateralAmount;\\n        (_debtRepaid, _feeCollected) = calcRedeem(_collateral, _collateralAmount);\\n        debt -= _debtRepaid;\\n\\n        if (collateral[_collateral] == 0) {\\n            collateralSet.remove(_collateral);\\n        }\\n\\n        IERC20(_collateral).safeTransfer(_msgSender(), _collateralAmount);\\n\\n        emit CollateralRedeemed(_collateral, _collateralAmount, collateral[_collateral], _debtRepaid, _feeCollected);\\n        emit DebtRepaid(_debtRepaid, debt);\\n    }\\n\\n    function healthFactor(bool _useMlr) public view returns (uint256 _healthFactor) {\\n        if (debt == 0) {\\n            return type(uint256).max;\\n        }\\n\\n        (uint256 _maxBorrowable, ) = borrowableWithDiff(address(0x0), 0, false, _useMlr);\\n\\n        _healthFactor = (_maxBorrowable * DECIMAL_PRECISION) / debt;\\n    }\\n\\n    function newHealthFactor(uint256 _newDebt, bool _useMlr) public view returns (uint256 _newHealthFactor) {\\n        if (_newDebt == 0) {\\n            return type(uint256).max;\\n        }\\n\\n        (uint256 _maxBorrowable, ) = borrowableWithDiff(address(0x0), 0, false, _useMlr);\\n        _newHealthFactor = (_maxBorrowable * DECIMAL_PRECISION) / _newDebt;\\n    }\\n\\n    function borrowableWithDiff(\\n        address _collateral,\\n        uint256 _diffAmount,\\n        bool _isAdd,\\n        bool _useMlr\\n    ) public view returns (uint256 _maxBorrowable, uint256 _borrowable) {\\n        uint256 _newCollateralAmount = collateral[_collateral];\\n        uint256 _borrowableAmount = 0;\\n\\n        if (_collateral != address(0x0)) {\\n            require(IVaultFactory(factory).isCollateralSupported(_collateral), \\\"collateral-not-supported\\\");\\n            if (_isAdd) {\\n                _newCollateralAmount += _diffAmount;\\n            } else {\\n                _newCollateralAmount -= _diffAmount;\\n            }\\n        }\\n\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(IVaultFactory(factory).priceFeed());\\n\\n        for (uint256 i = 0; i < collateralSet.length(); i++) {\\n            address _c = collateralSet.at(i);\\n            uint256 _collateralAmount = _c == _collateral ? _newCollateralAmount : collateral[_c];\\n            uint256 _price = _priceFeed.tokenPrice(_c);\\n            uint256 _divisor = _useMlr ? _priceFeed.mlr(_c) : _priceFeed.mcr(_c);\\n            uint256 _normalizedCollateralAmount = _collateralAmount * (10 ** (18 - _priceFeed.decimals(_c)));\\n            uint256 _collateralBorrowable = (_normalizedCollateralAmount * _price) / DECIMAL_PRECISION;\\n            _borrowableAmount += (_collateralBorrowable * DECIMAL_PRECISION) / _divisor;\\n        }\\n\\n        return (_borrowableAmount, (_borrowableAmount > debt) ? _borrowableAmount - debt : 0);\\n    }\\n\\n    function liquidate() external onlyFactory returns (uint256 _forgivenDebt) {\\n        require(healthFactor(true) < DECIMAL_PRECISION, \\\"liquidation-factor-above-1\\\");\\n\\n        uint256 _debt = debt;\\n        debt = 0;\\n        ILiquidationRouter router = ILiquidationRouter(IVaultFactory(factory).liquidationRouter());\\n        for (uint256 i = 0; i < collateralSet.length(); i++) {\\n            address _collateral = collateralSet.at(i);\\n            uint256 _collateralAmount = collateral[_collateral];\\n            uint256 _actualCollateralBalance = IERC20(_collateral).balanceOf(address(this));\\n            if (_actualCollateralBalance < _collateralAmount) {\\n                _collateralAmount = _actualCollateralBalance;\\n            }\\n            collateral[_collateral] = 0;\\n\\n            IERC20(_collateral).safeApprove(IVaultFactory(factory).liquidationRouter(), 0);\\n            IERC20(_collateral).safeApprove(IVaultFactory(factory).liquidationRouter(), type(uint256).max);\\n\\n            router.addSeizedCollateral(_collateral, _collateralAmount);\\n        }\\n        router.addUnderWaterDebt(address(this), _debt);\\n        router.tryLiquidate();\\n        _forgivenDebt = _debt;\\n    }\\n}\\n\",\"keccak256\":\"0xa7443e79fc175f1e11f2eb12ff200cb6f7dfed7cbb8d76d95a5a85bc8ea01e21\",\"license\":\"BUSL-1.1\"},\"contracts/VaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./utils/linked-address-list.sol\\\";\\nimport \\\"./Vault.sol\\\";\\nimport \\\"./VaultFactoryConfig.sol\\\";\\nimport \\\"./VaultFactoryList.sol\\\";\\n\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/ITokenPriceFeed.sol\\\";\\nimport \\\"./interfaces/IPriceFeed.sol\\\";\\nimport \\\"./interfaces/IMintableTokenOwner.sol\\\";\\nimport \\\"./interfaces/IMintableToken.sol\\\";\\nimport \\\"./interfaces/IVaultDeployer.sol\\\";\\nimport \\\"./interfaces/IVaultBorrowRate.sol\\\";\\n\\ncontract VaultFactory is ReentrancyGuard, VaultFactoryConfig, VaultFactoryList {\\n    event NewVault(address indexed vault, string name, address indexed owner);\\n    event VaultOwnerChanged(address indexed vault, address indexed oldOwner, address indexed newOwner);\\n\\n    using LinkedAddressList for LinkedAddressList.List;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IMintableToken;\\n\\n    address public immutable stable;\\n    address public immutable nativeWrapped;\\n\\n    IMintableTokenOwner public immutable mintableTokenOwner;\\n\\n    mapping(address => uint256) public collateral;\\n\\n    uint256 public totalDebt;\\n\\n    constructor(\\n        address _mintableTokenOwner,\\n        address _nativeWrapped,\\n        address _priceFeed,\\n        address _vaultDeployer,\\n        address _liquidationRouter,\\n        address _borrowRate\\n    ) VaultFactoryConfig(_vaultDeployer, _liquidationRouter) {\\n        require(_mintableTokenOwner != address(0x0), \\\"mintable-token-owner-is-0\\\");\\n\\n        mintableTokenOwner = IMintableTokenOwner(_mintableTokenOwner);\\n        stable = address(mintableTokenOwner.token());\\n\\n        require(stable != address(0x0), \\\"stable-is-0\\\");\\n        require(_nativeWrapped != address(0x0), \\\"nativew-is-0\\\");\\n        require(_priceFeed != address(0x0), \\\"pricefeed-is-0\\\");\\n        require(_borrowRate != address(0x0), \\\"borrow-rate-is-0\\\");\\n\\n        borrowRate = _borrowRate;\\n        nativeWrapped = _nativeWrapped;\\n        priceFeed = _priceFeed;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == nativeWrapped, \\\"only-native-wrapped\\\");\\n    }\\n\\n    modifier onlyVaultOwner(address _vault) {\\n        require(Vault(_vault).vaultOwner() == _msgSender(), \\\"only-vault-owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyVaultOwnerOrOperator(address _vault) {\\n        require(\\n            Vault(_vault).vaultOwner() == _msgSender() || Vault(_vault).isOperator(_msgSender()),\\n            \\\"only-vault-owner-or-operator\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyLiquidationRouter() {\\n        require(liquidationRouter == _msgSender(), \\\"only-liquidation-router\\\");\\n        _;\\n    }\\n\\n    function isCollateralSupported(address _collateral) external view returns (bool) {\\n        return _isCollateralSupported(_collateral);\\n    }\\n\\n    function transferVaultOwnership(address _vault, address _newOwner) external onlyVaultOwner(_vault) {\\n        address _msgSender = _msgSender();\\n        require(_newOwner != address(0x0), \\\"new-owner-is-0\\\");\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n\\n        emit VaultOwnerChanged(_vault, _msgSender, _newOwner);\\n        Vault(_vault).transferVaultOwnership(_newOwner);\\n        _transferVault(_msgSender, _newOwner, _vault);\\n    }\\n\\n    function createVault(string memory _name) public returns (address) {\\n        address _msgSender = _msgSender();\\n        address _vaultAddress = IVaultDeployer(vaultDeployer).deployVault(address(this), _msgSender, _name);\\n        _addVault(_msgSender, _vaultAddress);\\n        emit NewVault(_vaultAddress, _name, _msgSender);\\n\\n        return _vaultAddress;\\n    }\\n\\n    function _isCollateralSupported(address _collateral) internal view returns (bool) {\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(priceFeed);\\n        return (_priceFeed.tokenPriceFeed(_collateral) != address(0x0));\\n    }\\n\\n    function addCollateralNative(address _vault) external payable {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        require(_isCollateralSupported(nativeWrapped), \\\"collateral-not-supported\\\");\\n        uint256 _amount = msg.value;\\n\\n        collateral[nativeWrapped] += _amount;\\n\\n        require(collateral[nativeWrapped] <= collateralCap[nativeWrapped], \\\"collateral-cap-reached\\\");\\n\\n        IWETH(nativeWrapped).deposit{value: _amount}();\\n        IERC20(nativeWrapped).safeTransferFrom(address(this), _vault, _amount);\\n\\n        Vault(_vault).addCollateral(nativeWrapped, _amount);\\n    }\\n\\n    function removeCollateralNative(address _vault, uint256 _amount, address _to) external onlyVaultOwner(_vault) {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        require(_isCollateralSupported(nativeWrapped), \\\"collateral-not-supported\\\");\\n\\n        Vault(_vault).removeCollateral(nativeWrapped, _amount, address(this));\\n\\n        collateral[nativeWrapped] -= _amount;\\n\\n        IWETH(nativeWrapped).withdraw(_amount);\\n        payable(_to).transfer(_amount);\\n    }\\n\\n    function addCollateral(address _vault, address _collateral, uint256 _amount) external {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        require(_isCollateralSupported(_collateral), \\\"collateral-not-supported\\\");\\n\\n        collateral[_collateral] += _amount;\\n\\n        require(collateral[_collateral] <= collateralCap[_collateral], \\\"collateral-cap-reached\\\");\\n\\n        IERC20(_collateral).safeTransferFrom(_msgSender(), _vault, _amount);\\n        Vault(_vault).addCollateral(_collateral, _amount);\\n    }\\n\\n    function removeCollateral(\\n        address _vault,\\n        address _collateral,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyVaultOwner(_vault) {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        require(_isCollateralSupported(_collateral), \\\"collateral-not-supported\\\");\\n\\n        collateral[_collateral] -= _amount;\\n        Vault(_vault).removeCollateral(_collateral, _amount, _to);\\n    }\\n\\n    function borrow(address _vault, uint256 _amount, address _to) external onlyVaultOwnerOrOperator(_vault) {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        require(_to != address(0x0), \\\"to-is-0\\\");\\n\\n        totalDebt += _amount;\\n        _updateDebtWindow(_amount);\\n        Vault(_vault).borrow(_amount);\\n        uint256 _borrowRate = IVaultBorrowRate(borrowRate).getBorrowRate(_vault);\\n        uint256 _feeAmount = (_amount * _borrowRate) / DECIMAL_PRECISION;\\n\\n        mintableTokenOwner.mint(_to, _amount - _feeAmount);\\n        mintableTokenOwner.mint(borrowFeeRecipient, _feeAmount);\\n    }\\n\\n    function distributeBadDebt(address _vault, uint256 _amount) external nonReentrant onlyLiquidationRouter {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        totalDebt += _amount;\\n        Vault(_vault).addBadDebt(_amount);\\n    }\\n\\n    function closeVault(address _vault) external onlyVaultOwner(_vault) {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        require(Vault(_vault).debt() == 0, \\\"debt-not-0\\\");\\n        require(Vault(_vault).collateralsLength() == 0, \\\"collateral-not-0\\\");\\n\\n        _removeVault(_msgSender(), _vault);\\n    }\\n\\n    function repay(address _vault, uint256 _amount) external {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        totalDebt -= _amount;\\n        Vault(_vault).repay(_amount);\\n\\n        IMintableToken(stable).safeTransferFrom(_msgSender(), address(this), _amount);\\n        IMintableToken(stable).burn(_amount);\\n    }\\n\\n    function redeem(address _vault, address _collateral, uint256 _collateralAmount, address _to) external nonReentrant {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        require(_to != address(0x0), \\\"to-is-0\\\");\\n\\n        require(isReedemable(_vault, _collateral), \\\"not-redeemable\\\");\\n\\n        (uint256 _debtRepaid, uint256 _feeCollected) = Vault(_vault).redeem(_collateral, _collateralAmount);\\n\\n        totalDebt -= _debtRepaid;\\n        collateral[_collateral] -= _collateralAmount;\\n\\n        IMintableToken(stable).safeTransferFrom(_msgSender(), address(this), _debtRepaid + _feeCollected);\\n        IMintableToken(stable).burn(_debtRepaid);\\n        IMintableToken(stable).transfer(redemptionFeeRecipient, _feeCollected);\\n\\n        IERC20(_collateral).safeTransfer(_to, _collateralAmount);\\n    }\\n\\n    function liquidate(address _vault) external nonReentrant {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n\\n        address _vaultOwner = Vault(_vault).vaultOwner();\\n        uint256 _forgivenDebt = Vault(_vault).liquidate();\\n\\n        totalDebt -= _forgivenDebt;\\n\\n        _removeVault(_vaultOwner, _vault);\\n    }\\n\\n    function isLiquidatable(address _vault) external view returns (bool) {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        return Vault(_vault).healthFactor(true) < DECIMAL_PRECISION;\\n    }\\n\\n    /// @notice Collateral with higher MCR can be redeemed first\\n    function isReedemable(address _vault, address _collateral) public view returns (bool) {\\n        require(_isCollateralSupported(_collateral), \\\"collateral-not-supported\\\");\\n        if (!Vault(_vault).containsCollateral(_collateral)) {\\n            return false;\\n        }\\n        uint256 _healthFactor = Vault(_vault).healthFactor(false);\\n        if (_healthFactor >= redemptionHealthFactorLimit) {\\n            return false;\\n        }\\n\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(priceFeed);\\n        uint256 _collateralMcr = _priceFeed.mcr(_collateral);\\n\\n        address[] memory _collaterals = Vault(_vault).collaterals();\\n        uint256 _length = _collaterals.length;\\n\\n        for (uint256 i; i < _length; i++) {\\n            if (_collaterals[i] != _collateral) {\\n                uint256 _mcr = _priceFeed.mcr(_collaterals[i]);\\n                if (_mcr > _collateralMcr) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _updateDebtWindow(uint256 _newDebt) internal {\\n        require(totalDebt <= debtCeiling, \\\"debt-ceiling-reached\\\");\\n\\n        if (block.timestamp > lastDebtWindow + debtWindowSize) {\\n            debtWindowAmount = _newDebt;\\n            lastDebtWindow = block.timestamp;\\n        } else {\\n            debtWindowAmount += _newDebt;\\n        }\\n        require(debtWindowAmount <= maxDebtPerWindow, \\\"debt-window-amount-reached\\\");\\n    }\\n}\",\"keccak256\":\"0xd67697128037519ecad8086f34100b95f64b2324c7b824af697ce56bbf45f969\",\"license\":\"BUSL-1.1\"},\"contracts/VaultFactoryConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\nimport \\\"./utils/constants.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract VaultFactoryConfig is Constants, Ownable {\\n    event PriceFeedUpdated(address indexed priceFeed);\\n    event MaxTokensPerVaultUpdated(uint256 oldMaxTokensPerVault, uint256 newMaxTokensPerVault);\\n    event RedemptionRateUpdated(uint256 oldRedemptionRate, uint256 newRedemptionRate);\\n    event BorrowRateUpdated(address oldBorrowRate, address newBorrowRate);\\n    event RedemptionHealthFactorLimitUpdated(uint256 oldRedemptionHealthFactorLimit, uint256 newRedemptionHealthFactorLimit);\\n    event DebtCeilingUpdated(uint256 oldDebtCeiling, uint256 newDebtCeiling);\\n    event MaxDebtPerWindowUpdated(uint256 oldMaxDebtPerWindow, uint256 newMaxDebtPerWindow);\\n    event DebtWindowSizeUpdated(uint256 oldDebtWindowSize, uint256 newDebtWindowSize);\\n    event CollateralCapacityUpdated(address indexed collateral, uint256 oldCapacity, uint256 newCapacity);\\n    event liquidationRouterUpdated(address indexed liquidationRouter);\\n\\n    address public priceFeed;\\n    address public borrowRate;\\n\\n    uint256 public MAX_TOKENS_PER_VAULT = 5;\\n    uint256 public redemptionRate = PERCENT_05; // 0.5%\\n    \\n    uint256 public redemptionHealthFactorLimit = 1.5 ether; // 2.0 HF\\n\\n    address public borrowFeeRecipient;\\n    address public redemptionFeeRecipient;\\n\\n    mapping(address => uint256) public collateralCap;\\n\\n    uint256 public debtCeiling = type(uint256).max; // max stablecoin debt issued by the protocol\\n\\n    uint256 public maxDebtPerWindow = 2000 ether; // 1M\\n    uint256 public debtWindowSize = 1 hours;\\n    uint256 public lastDebtWindow;\\n    uint256 public debtWindowAmount;\\n\\n    address public vaultDeployer;\\n    address public liquidationRouter;\\n\\n    function setVaultDeployer(address _vaultDeployer) external onlyOwner {\\n        require(_vaultDeployer != address(0x0), \\\"vault-deployer-is-0\\\");\\n        vaultDeployer = _vaultDeployer;\\n    }\\n\\n    function setLiquidationRouter(address _liquidationRouter) external onlyOwner {\\n        require(_liquidationRouter != address(0x0), \\\"liquidation-router-is-0\\\");\\n        liquidationRouter = _liquidationRouter;\\n        emit liquidationRouterUpdated(_liquidationRouter);\\n    }\\n\\n    function setCollateralCapacity(address _collateral, uint256 _cap) external onlyOwner {\\n        require(_collateral != address(0x0), \\\"collateral-is-0\\\");\\n        emit CollateralCapacityUpdated(_collateral, collateralCap[_collateral], _cap);\\n        collateralCap[_collateral] = _cap;\\n    }\\n\\n    function setDebtCeiling(uint256 _debtCeiling) external onlyOwner {\\n        emit DebtCeilingUpdated(debtCeiling, _debtCeiling);\\n        debtCeiling = _debtCeiling;\\n    }\\n\\n    function setMaxDebtPerWindow(uint256 _maxDebtPerWindow) external onlyOwner {\\n        emit MaxDebtPerWindowUpdated(maxDebtPerWindow, _maxDebtPerWindow);\\n        maxDebtPerWindow = _maxDebtPerWindow;\\n    }\\n\\n    function setDebtWindowSize(uint256 _debtWindowSize) external onlyOwner {\\n        emit DebtWindowSizeUpdated(debtWindowSize, _debtWindowSize);\\n        debtWindowSize = _debtWindowSize;\\n    }\\n\\n    function setMaxTokensPerVault(uint256 _maxTokensPerVault) external onlyOwner {\\n        require(_maxTokensPerVault > 0, \\\"max-tokens-per-vault-is-0\\\");\\n        emit MaxTokensPerVaultUpdated(MAX_TOKENS_PER_VAULT, _maxTokensPerVault);\\n        MAX_TOKENS_PER_VAULT = _maxTokensPerVault;\\n    }\\n\\n    function setPriceFeed(address _priceFeed) external onlyOwner {\\n        require(_priceFeed != address(0x0), \\\"pricefeed-is-0\\\");\\n        priceFeed = _priceFeed;\\n        emit PriceFeedUpdated(_priceFeed);\\n    }\\n\\n    function setRedemptionRate(uint256 _redemptionRate) external onlyOwner {\\n        require(_redemptionRate <= MAX_REDEMPTION_RATE, \\\"redemption-rate-too-high\\\");\\n        emit RedemptionRateUpdated(redemptionRate, _redemptionRate);\\n        redemptionRate = _redemptionRate;\\n    }\\n\\n    function setBorrowRate(address _borrowRate) external onlyOwner {\\n        require(_borrowRate != address(0), \\\"borrow-rate-is-0\\\");\\n        emit BorrowRateUpdated(borrowRate, _borrowRate);\\n        borrowRate = _borrowRate;\\n    }\\n\\n    function setRedemptionHealthFactorLimit(uint256 _redemptionHealthFactorLimit) external onlyOwner {\\n        emit RedemptionHealthFactorLimitUpdated(redemptionHealthFactorLimit, _redemptionHealthFactorLimit);\\n        redemptionHealthFactorLimit = _redemptionHealthFactorLimit;\\n    }\\n\\n    function setBorrowFeeRecipient(address _borrowFeeRecipient) external onlyOwner {\\n        require(_borrowFeeRecipient != address(0x0), \\\"borrow-fee-recipient-is-0\\\");\\n        borrowFeeRecipient = _borrowFeeRecipient;\\n    }\\n\\n    function setRedemptionFeeRecipient(address _redemptionFeeRecipient) external onlyOwner {\\n        require(_redemptionFeeRecipient != address(0x0), \\\"redemption-fee-recipient-is-0\\\");\\n        redemptionFeeRecipient = _redemptionFeeRecipient;\\n    }\\n\\n    constructor(address _vaultDeployer, address _liquidationRouter) {\\n        require(_vaultDeployer != address(0x0), \\\"vault-deployer-is-0\\\");\\n        require(_liquidationRouter != address(0x0), \\\"liquidation-factory-is-0\\\");\\n        vaultDeployer = _vaultDeployer;\\n        borrowFeeRecipient = _msgSender();\\n        redemptionFeeRecipient = _msgSender();\\n        lastDebtWindow = block.timestamp;\\n        liquidationRouter = _liquidationRouter;\\n    }\\n}\\n\",\"keccak256\":\"0x1630266d2aed9f3b977d926fb740ae953fb741a8298b4e2738da2e6b5c62af0c\",\"license\":\"BUSL-1.1\"},\"contracts/VaultFactoryList.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\nimport \\\"./utils/constants.sol\\\";\\nimport \\\"./utils/linked-address-list.sol\\\";\\n// import openzeppelin context\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nabstract contract VaultFactoryList is Context {\\n    using LinkedAddressList for LinkedAddressList.List;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    LinkedAddressList.List _vaults;\\n    mapping(address => EnumerableSet.AddressSet) private _vaultsByOwner;\\n\\n    function vaultsByOwnerLength(address _owner) external view returns (uint256) {\\n        return _vaultsByOwner[_owner].length();\\n    }\\n\\n    function vaultsByOwner(address _owner, uint256 _index) external view returns (address) {\\n        return _vaultsByOwner[_owner].at(_index);\\n    }\\n\\n    function _addVault(address _owner, address _vault) internal {\\n        require(_vaults.add(_vault, address(0x0), false), \\\"vault-could-not-be-added\\\");\\n        _vaultsByOwner[_owner].add(_vault);\\n    }\\n\\n    function _transferVault(address _from, address _to, address _vault) internal {\\n        _vaultsByOwner[_from].remove(_vault);\\n        _vaultsByOwner[_to].add(_vault);\\n    }\\n\\n    function _removeVault(address _owner, address _vault) internal {\\n        require(_vaults.remove(_vault), \\\"vault-could-not-be-removed\\\");\\n        _vaultsByOwner[_owner].remove(_vault);\\n    }\\n\\n    /**\\n     * @dev returns the number of vaults for specific token\\n     */\\n    function vaultCount() public view returns (uint256) {\\n        return _vaults._size;\\n    }\\n\\n    /**\\n     * @dev returns the last vault by maximum collaterization ratio\\n     */\\n    function lastVault() public view returns (address) {\\n        return _vaults._last;\\n    }\\n\\n    /**\\n     * @dev returns the first vault by minimal collaterization ratio\\n     */\\n    function firstVault() public view returns (address) {\\n        return _vaults._first;\\n    }\\n\\n    /**\\n     * @dev returns the next vault by collaterization ratio\\n     */\\n    function nextVault(address _vault) public view returns (address) {\\n        return _vaults._values[_vault].next;\\n    }\\n\\n    /**\\n     * @dev returns the previous vault by collaterization ratio\\n     */\\n    function prevVault(address _vault) public view returns (address) {\\n        return _vaults._values[_vault].prev;\\n    }\\n\\n    /**\\n     * @dev returns and checks if such vault exists for this token\\n     */\\n    function containsVault(address _vault) public view returns (bool) {\\n        return _vaults._values[_vault].next != address(0x0);\\n    }\\n}\\n\",\"keccak256\":\"0x5df7140dfb0255cf163d518d0f98f2207ca9156483d07ab9516cab17a3a1a8f9\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILiquidationRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ILiquidationRouter {\\n    function addSeizedCollateral(address _collateral, uint256 _amount) external;\\n\\n    function addUnderWaterDebt(address _vault, uint256 _amount) external;\\n\\n    function removeUnderWaterDebt(uint256 _amount) external;\\n\\n    function underWaterDebt() external view returns (uint256);\\n\\n    function collaterals() external view returns (address[] memory);\\n\\n    function collateral(address _collateral) external view returns (uint256);\\n\\n    function tryLiquidate() external;\\n\\n    function stabilityPool() external view returns (address);\\n    function auctionManager() external view returns (address);\\n    function lastResortLiquidation() external view returns (address);\\n    function distributeBadDebt(address _vault, uint256 _amount) external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x39ecb5fde25314cbe92bbca9fab7903ec4cd96f9b10d6fce0a5810aec8a28586\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IMintableToken is IERC20, IOwnable {\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n}\\n\",\"keccak256\":\"0xe1e7e2fa917ba94b2961fd382bd396113396e6a2babc3e84a91fe0b582ca2e2b\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableTokenOwner.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMintableTokenOwner is IOwnable {\\n  function token() external view returns (IMintableToken);\\n\\n  function mint(address _recipient, uint256 _amount) external;\\n\\n  function transferTokenOwnership(address _newOwner) external;\\n\\n  function addMinter(address _newMinter) external;\\n\\n  function revokeMinter(address _minter) external;\\n}\\n\",\"keccak256\":\"0xa23ed4bc24f67535bdf6b9fda45af99202f4b37b137d68111205efb04022f476\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x955ead6c2a923863ba607a752e4a9924ab4fe4d07dd6cf09e5f68d0bece11049\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IPriceFeed {\\n  function token() external view returns (address);\\n\\n  function price() external view returns (uint256);\\n\\n  function pricePoint() external view returns (uint256);\\n\\n  function emitPriceSignal() external;\\n\\n  event PriceUpdate(address token, uint256 price, uint256 average);\\n}\\n\",\"keccak256\":\"0x57a011d8bc429249a622be078f750d045d2d9a1bb0b153968848cc8895eb02b3\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenPriceFeed.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface ITokenPriceFeed is IOwnable {\\n    struct TokenInfo {\\n        address priceFeed;\\n        uint256 mcr; // Minimum Collateralization Ratio\\n        uint256 mlr; // Minimum Liquidation Ratio\\n        uint256 borrowRate;\\n        uint256 decimals;\\n    }\\n\\n    function tokenPriceFeed(address) external view returns (address);\\n\\n    function tokenPrice(address _token) external view returns (uint256);\\n\\n    function mcr(address _token) external view returns (uint256);\\n\\n    function decimals(address _token) external view returns (uint256);\\n\\n    function mlr(address _token) external view returns (uint256);\\n\\n    function borrowRate(address _token) external view returns (uint256);\\n\\n    function setTokenPriceFeed(address _token, address _priceFeed, uint256 _mcr, uint256 _mlr, uint256 _borrowRate, uint256 _decimals) external;\\n\\n    event NewTokenPriceFeed(\\n        address _token,\\n        address _priceFeed,\\n        string _name,\\n        string _symbol,\\n        uint256 _mcr,\\n        uint256 _mlr,\\n        uint256 _borrowRate,\\n        uint256 _decimals\\n    );\\n}\\n\",\"keccak256\":\"0xbc40f3c92c4f7a12a4a053d372c7c8621b16e104c0b0d3c20ddf6d8950aa6b90\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultBorrowRate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IVaultBorrowRate {\\n    function getBorrowRate(address _vaultAddress) external view returns (uint256);\\n}\",\"keccak256\":\"0xeac158f344b6d62051c431c81d893f8f25decfd0c9573edd9e527d7026ffb1b3\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultDeployer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IVaultDeployer {\\n    function deployVault(address _factory, address _vaultOwner, string memory _name) external returns (address);\\n}\\n\",\"keccak256\":\"0x0850d243bbae32b47845bab64f64bea73f3a2dd8e90337b5c2f41b88505f5902\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IVaultFactory {\\n    event NewVault(address indexed vault, string name, address indexed owner);\\n    event PriceFeedUpdated(address indexed priceFeed);\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function vaultCount() external view returns (uint256);\\n    function lastVault() external view returns (address);\\n    function firstVault() external view returns (address);\\n    function nextVault(address _vault) external view returns (address);\\n    function prevVault(address _vault) external view returns (address);\\n    function liquidationRouter() external view returns (address);\\n    function MAX_TOKENS_PER_VAULT() external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function transferVaultOwnership(address _vault, address _newOwner) external;\\n    function createVault(string memory _name) external returns (address);\\n    function addCollateralNative(address _vault) external payable;\\n    function removeCollateralNative(address _vault, uint256 _amount, address _to) external;\\n    function addCollateral(address _vault, address _collateral, uint256 _amount) external;\\n    function removeCollateral(address _vault, address _collateral, uint256 _amount, address _to) external;\\n    function borrow(address _vault, uint256 _amount, address _to) external;\\n    function distributeBadDebt(address _vault, uint256 _amount) external;\\n    function closeVault(address _vault) external;\\n    function repay(address _vault, uint256 _amount) external;\\n    function redeem(address _vault, address _collateral, uint256 _collateralAmount, address _to) external;\\n    function liquidate(address _vault) external;\\n    function isLiquidatable(address _vault) external view returns (bool);\\n    function isReedemable(address _vault, address _collateral) external view returns (bool);\\n    function containsVault(address _vault) external view returns (bool);\\n    function stable() external view returns (address);\\n    function isCollateralSupported(address _collateral) external view returns (bool);\\n    function vaultsByOwnerLength(address _owner) external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x2d7245f166e18b43f804a62264391432008a204d43920f6ac000fb41657f169b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IVaultFactoryConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IVaultFactoryConfig {\\n    event PriceFeedUpdated(address indexed priceFeed);\\n    event MaxTokensPerVaultUpdated(uint256 oldMaxTokensPerVault, uint256 newMaxTokensPerVault);\\n    event RedemptionRateUpdated(uint256 oldRedemptionRate, uint256 newRedemptionRate);\\n    event BorrowRateUpdated(uint256 oldBorrowRate, uint256 newBorrowRate);\\n    event RedemptionHealthFactorLimitUpdated(uint256 oldRedemptionHealthFactorLimit, uint256 newRedemptionHealthFactorLimit);\\n\\n    function setMaxTokensPerVault(uint256 _maxTokensPerVault) external;\\n    function setPriceFeed(address _priceFeed) external;\\n    function setRedemptionRate(uint256 _redemptionRate) external;\\n    function setBorrowRate(uint256 _borrowRate) external;\\n    function setRedemptionHealthFactorLimit(uint256 _redemptionHealthFactorLimit) external;\\n    function setBorrowFeeRecipient(address _borrowFeeRecipient) external;\\n    function setRedemptionFeeRecipient(address _redemptionFeeRecipient) external;\\n\\n    function priceFeed() external view returns (address);\\n    function MAX_TOKENS_PER_VAULT() external view returns (uint256);\\n    function redemptionRate() external view returns (uint256);\\n    function borrowRate() external view returns (uint256);\\n    function redemptionHealthFactorLimit() external view returns (uint256);\\n    function borrowFeeRecipient() external view returns (address);\\n    function redemptionFeeRecipient() external view returns (address);\\n}\",\"keccak256\":\"0xc79a241d4206b296d9443b1ba262d164ac57a9da42046be9242052586a3a5243\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function approve(address, uint256) external returns (bool);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool);\\n\\n  function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x6de76ef362a5e5deeda393ed8f59d0f47b15e2adf4fa28479fd86c2f58b01cf6\",\"license\":\"MIT\"},\"contracts/utils/constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract Constants {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant LIQUIDATION_RESERVE = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant PERCENT = (DECIMAL_PRECISION * 1) / 100; // 1%\\n  uint256 public constant PERCENT10 = PERCENT * 10; // 10%\\n  uint256 public constant PERCENT_05 = PERCENT / 2; // 0.5%\\n\\n  uint256 public constant MAX_BORROWING_RATE = (DECIMAL_PRECISION * 5) / 100; // 5%\\n  uint256 public constant MAX_REDEMPTION_RATE = (DECIMAL_PRECISION * 1) / 100; // 1%\\n\\n}\\n\",\"keccak256\":\"0xd86e0015d9180d99864bdf3b0f512e8054d98e7e68e61ac081facedccffb4378\",\"license\":\"MIT\"},\"contracts/utils/linked-address-list.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @title implements LinkedList structure used to store/operate sorted Troves\\nlibrary LinkedAddressList {\\n  struct EntryLink {\\n    address prev;\\n    address next;\\n  }\\n\\n  struct List {\\n    address _last;\\n    address _first;\\n    uint256 _size;\\n    mapping(address => EntryLink) _values;\\n  }\\n\\n  function add(\\n    List storage _list,\\n    address _element,\\n    address _reference,\\n    bool _before\\n  ) internal returns (bool) {\\n    require(\\n      _reference == address(0x0) || _list._values[_reference].next != address(0x0),\\n      \\\"79d3d _ref neither valid nor 0x\\\"\\n    );\\n    // the lement must not exist in order to be added\\n    EntryLink storage element_values = _list._values[_element];\\n    if (element_values.prev == address(0x0)) {\\n      // the list is empty\\n      if (_list._last == address(0x0)) {\\n        // if it is the first element in the list, it refers to itself to indicate this\\n        element_values.prev = _element;\\n        element_values.next = _element;\\n        // the new element is now officially the first\\n        _list._first = _element;\\n        // the new element is now officially the last\\n        _list._last = _element;\\n      } else {\\n        if (_before && (_reference == address(0x0) || _reference == _list._first)) {\\n          // the element should be added as the first element\\n          address first = _list._first;\\n          _list._values[first].prev = _element;\\n          element_values.prev = _element;\\n          element_values.next = first;\\n          _list._first = _element;\\n        } else if (!_before && (_reference == address(0x0) || _reference == _list._last)) {\\n          // the element should be added as the last element\\n          address last = _list._last;\\n          _list._values[last].next = _element;\\n          element_values.prev = last;\\n          element_values.next = _element;\\n          _list._last = _element;\\n        } else {\\n          // the element should be inserted in between two elements\\n          EntryLink memory ref = _list._values[_reference];\\n          if (_before) {\\n            element_values.prev = ref.prev;\\n            element_values.next = _reference;\\n            _list._values[_reference].prev = _element;\\n            _list._values[ref.prev].next = _element;\\n          } else {\\n            element_values.prev = _reference;\\n            element_values.next = ref.next;\\n            _list._values[_reference].next = _element;\\n            _list._values[ref.next].prev = _element;\\n          }\\n        }\\n      }\\n      _list._size = _list._size + 1;\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  function remove(List storage _list, address _element) internal returns (bool) {\\n    EntryLink memory element_values = _list._values[_element];\\n    if (element_values.next != address(0x0)) {\\n      if (_element == _list._last && _element == _list._first) {\\n        // it is the last element in the list\\n        delete _list._last;\\n        delete _list._first;\\n      } else if (_element == _list._first) {\\n        // simplified process for removing the first element\\n        address next = element_values.next;\\n        _list._values[next].prev = next;\\n        _list._first = next;\\n      } else if (_element == _list._last) {\\n        // simplified process for removing the last element\\n        address new_list_last = element_values.prev;\\n        _list._last = new_list_last;\\n        _list._values[new_list_last].next = new_list_last;\\n      } else {\\n        // set the previous and next to point to each other\\n        address next = element_values.next;\\n        address prev = element_values.prev;\\n        _list._values[next].prev = prev;\\n        _list._values[prev].next = next;\\n      }\\n      // in any case, delete the element itself\\n      delete _list._values[_element];\\n      _list._size = _list._size - 1;\\n      return true;\\n    }\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0x75d3ac9752e4d9270641e423029a31dec6f70f8f4224736deb30d8243b2ab260\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106104185760003560e01c80638ffadd0c11610228578063b85a8b2011610128578063dd351b9a116100bb578063fa6bd2ee1161008a578063fdbb3acf1161006f578063fdbb3acf14610c79578063fdc10daf14610cb2578063ffbfb8ad14610cd257600080fd5b8063fa6bd2ee14610c43578063fc7b9c1814610c6357600080fd5b8063dd351b9a14610bd7578063e1c84ea414610bed578063f2fde38b14610c03578063f7b6090814610c2357600080fd5b8063d1400f68116100f7578063d1400f6814610b61578063d8fdf91714610b81578063d984d5b214610ba1578063d9aa047314610bb757600080fd5b8063b85a8b201461075a578063c3971f6514610b0b578063c914b43714610b21578063c99cb2b714610b4157600080fd5b8063a3320222116101bb578063abdc55411161018a578063ad09014d1161016f578063ad09014d14610ab6578063b1511cc914610acb578063b6b2196d14610aeb57600080fd5b8063abdc554114610a8c578063aceb2d0414610aa157600080fd5b8063a332022214610a0a578063a5fdc5de14610a2a578063a74dd4c414610a57578063a7c6a10014610a7757600080fd5b806396f57b6e116101f757806396f57b6e146109985780639ce11f2d146109b6578063a0609bd4146109ea578063a20baee61461093c57600080fd5b80638ffadd0c1461091c578063923c1eec1461093c578063924adef01461095857806394bcfdaa1461097857600080fd5b80633fe1da8811610333578063679fda70116102c6578063741bef1a116102955780638abca6731161027a5780638abca673146108b45780638da5cb5b146108e85780638f81c12c1461090657600080fd5b8063741bef1a14610856578063839936c01461087657600080fd5b8063679fda70146107e15780636c665a5514610801578063715018a614610821578063724e78da1461083657600080fd5b80634bb97042116103025780634bb970421461075a578063540385a31461076f57806359781034146107855780635b8b5770146107a557600080fd5b80633fe1da88146106e45780634349d0811461070457806344ba8b0e14610717578063451e87391461072d57600080fd5b806323896091116103ab5780632f17e0301161037a5780632f17e030146106645780632f865568146106845780633cf57c61146106a45780633d913818146106c457600080fd5b806323896091146105e6578063274b600a14610606578063294c6095146106265780632a807f7c1461064657600080fd5b80630b3392d8116103e75780630b3392d81461053a5780631a0121db1461055a57806322867d781461059257806322be3de1146105b257600080fd5b8063027d5946146104a1578063042e02cf146104c157806304aecb76146104f6578063098d32281461051657600080fd5b3661049c57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461049a5760405162461bcd60e51b815260206004820152601360248201527f6f6e6c792d6e61746976652d777261707065640000000000000000000000000060448201526064015b60405180910390fd5b005b600080fd5b3480156104ad57600080fd5b5061049a6104bc366004614335565b610ce8565b3480156104cd57600080fd5b506104e16104dc366004614377565b611016565b60405190151581526020015b60405180910390f35b34801561050257600080fd5b506104e1610511366004614394565b6110ee565b34801561052257600080fd5b5061052c60001981565b6040519081526020016104ed565b34801561054657600080fd5b5061049a6105553660046143cd565b611463565b34801561056657600080fd5b5061057a6105753660046143e6565b6114ac565b6040516001600160a01b0390911681526020016104ed565b34801561059e57600080fd5b5061049a6105ad3660046143e6565b6114d5565b3480156105be57600080fd5b5061057a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105f257600080fd5b5061049a610601366004614377565b611676565b34801561061257600080fd5b5061049a610621366004614377565b6116f6565b34801561063257600080fd5b5060075461057a906001600160a01b031681565b34801561065257600080fd5b506011546001600160a01b031661057a565b34801561067057600080fd5b50600f5461057a906001600160a01b031681565b34801561069057600080fd5b5061049a61069f366004614377565b611776565b3480156106b057600080fd5b5061049a6106bf3660046143cd565b6118d9565b3480156106d057600080fd5b5061049a6106df3660046143e6565b611972565b3480156106f057600080fd5b5061057a6106ff366004614459565b611a3f565b61049a610712366004614377565b611b32565b34801561072357600080fd5b5061052c600c5481565b34801561073957600080fd5b5061052c610748366004614377565b60096020526000908152604090205481565b34801561076657600080fd5b5061052c611de6565b34801561077b57600080fd5b5061052c60055481565b34801561079157600080fd5b5061049a6107a03660046144ee565b611e08565b3480156107b157600080fd5b5061057a6107c0366004614377565b6001600160a01b039081166000908152601460205260409020600101541690565b3480156107ed57600080fd5b5060105461057a906001600160a01b031681565b34801561080d57600080fd5b5061049a61081c366004614335565b611fd5565b34801561082d57600080fd5b5061049a612463565b34801561084257600080fd5b5061049a610851366004614377565b612477565b34801561086257600080fd5b5060025461057a906001600160a01b031681565b34801561088257600080fd5b506104e1610891366004614377565b6001600160a01b0390811660009081526014602052604090206001015416151590565b3480156108c057600080fd5b5061057a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156108f457600080fd5b506001546001600160a01b031661057a565b34801561091257600080fd5b5061052c600e5481565b34801561092857600080fd5b5061052c610937366004614377565b61251f565b34801561094857600080fd5b5061052c670de0b6b3a764000081565b34801561096457600080fd5b5061049a610973366004614377565b612540565b34801561098457600080fd5b5060085461057a906001600160a01b031681565b3480156109a457600080fd5b506012546001600160a01b031661057a565b3480156109c257600080fd5b5061057a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156109f657600080fd5b5061049a610a0536600461452f565b6125c0565b348015610a1657600080fd5b5061049a610a253660046143cd565b6127c5565b348015610a3657600080fd5b5061052c610a45366004614377565b60166020526000908152604090205481565b348015610a6357600080fd5b5061049a610a723660046143cd565b61280e565b348015610a8357600080fd5b5060135461052c565b348015610a9857600080fd5b5061052c612857565b348015610aad57600080fd5b5061052c61286c565b348015610ac257600080fd5b5061052c61288d565b348015610ad757600080fd5b5061049a610ae63660046143cd565b6128b7565b348015610af757600080fd5b5061049a610b063660046143cd565b612900565b348015610b1757600080fd5b5061052c60065481565b348015610b2d57600080fd5b5060035461057a906001600160a01b031681565b348015610b4d57600080fd5b5061049a610b5c366004614377565b6129b7565b348015610b6d57600080fd5b5061049a610b7c3660046143e6565b612c35565b348015610b8d57600080fd5b5061049a610b9c366004614377565b612d87565b348015610bad57600080fd5b5061052c600d5481565b348015610bc357600080fd5b5061049a610bd236600461452f565b612e4e565b348015610be357600080fd5b5061052c600b5481565b348015610bf957600080fd5b5061052c600a5481565b348015610c0f57600080fd5b5061049a610c1e366004614377565b61319b565b348015610c2f57600080fd5b5061049a610c3e366004614377565b613228565b348015610c4f57600080fd5b506104e1610c5e366004614377565b6132d0565b348015610c6f57600080fd5b5061052c60175481565b348015610c8557600080fd5b5061057a610c94366004614377565b6001600160a01b039081166000908152601460205260409020541690565b348015610cbe57600080fd5b5061049a610ccd366004614394565b6132db565b348015610cde57600080fd5b5061052c60045481565b82336001600160a01b0316816001600160a01b0316631f52692b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d559190614582565b6001600160a01b031614610d9e5760405162461bcd60e51b815260206004820152601060248201526f37b7363c96bb30bab63a16b7bbb732b960811b6044820152606401610491565b6001600160a01b0380851660009081526014602052604090206001015416610dfa5760405162461bcd60e51b815260206004820152600f60248201526e1d985d5b1d0b5b9bdd0b599bdd5b99608a1b6044820152606401610491565b610e237f000000000000000000000000000000000000000000000000000000000000000061350d565b610e6f5760405162461bcd60e51b815260206004820152601860248201527f636f6c6c61746572616c2d6e6f742d737570706f7274656400000000000000006044820152606401610491565b604051633879b0c560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052306044830152851690633879b0c590606401600060405180830381600087803b158015610edf57600080fd5b505af1158015610ef3573d6000803e3d6000fd5b5050506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660009081526016602052604081208054869350909190610f419084906145b5565b90915550506040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015610fc157600080fd5b505af1158015610fd5573d6000803e3d6000fd5b50506040516001600160a01b038516925085156108fc02915085906000818181858888f1935050505015801561100f573d6000803e3d6000fd5b5050505050565b6001600160a01b038082166000908152601460205260408120600101549091166110745760405162461bcd60e51b815260206004820152600f60248201526e1d985d5b1d0b5b9bdd0b599bdd5b99608a1b6044820152606401610491565b60405163c3f7e0b760e01b815260016004820152670de0b6b3a7640000906001600160a01b0384169063c3f7e0b790602401602060405180830381865afa1580156110c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e791906145c8565b1092915050565b60006110f98261350d565b6111455760405162461bcd60e51b815260206004820152601860248201527f636f6c6c61746572616c2d6e6f742d737570706f7274656400000000000000006044820152606401610491565b6040517f4bfc894d0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152841690634bfc894d90602401602060405180830381865afa1580156111a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c891906145e1565b6111d45750600061145d565b60405163c3f7e0b760e01b8152600060048201819052906001600160a01b0385169063c3f7e0b790602401602060405180830381865afa15801561121c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124091906145c8565b9050600654811061125557600091505061145d565b6002546040517faa41911f0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015290911690600090829063aa41911f90602401602060405180830381865afa1580156112bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e191906145c8565b90506000866001600160a01b0316634113e5ca6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611323573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261134b9190810190614603565b805190915060005b8181101561145257876001600160a01b0316838281518110611377576113776146b5565b60200260200101516001600160a01b031614611440576000856001600160a01b031663aa41911f8584815181106113b0576113b06146b5565b60200260200101516040518263ffffffff1660e01b81526004016113e391906001600160a01b0391909116815260200190565b602060405180830381865afa158015611400573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142491906145c8565b90508481111561143e57600097505050505050505061145d565b505b8061144a816146cb565b915050611353565b506001955050505050505b92915050565b61146b6135ab565b600b5460408051918252602082018390527f83243d8dfaeb36f198b8b4fae6e54c48ee1a5a89dcf13fcafe5486801cac5464910160405180910390a1600b55565b6001600160a01b03821660009081526015602052604081206114ce9083613605565b9392505050565b6001600160a01b03808316600090815260146020526040902060010154166115315760405162461bcd60e51b815260206004820152600f60248201526e1d985d5b1d0b5b9bdd0b599bdd5b99608a1b6044820152606401610491565b806017600082825461154391906145b5565b90915550506040517f371fd8e6000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b0383169063371fd8e690602401600060405180830381600087803b1580156115a357600080fd5b505af11580156115b7573d6000803e3d6000fd5b505050506115f76115c53390565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903084613611565b604051630852cd8d60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c68906024015b600060405180830381600087803b15801561165a57600080fd5b505af115801561166e573d6000803e3d6000fd5b505050505050565b61167e6135ab565b6001600160a01b0381166116d45760405162461bcd60e51b815260206004820152601360248201527f7661756c742d6465706c6f7965722d69732d30000000000000000000000000006044820152606401610491565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6116fe6135ab565b6001600160a01b0381166117545760405162461bcd60e51b815260206004820152601960248201527f626f72726f772d6665652d726563697069656e742d69732d30000000000000006044820152606401610491565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b61177e6136c2565b6001600160a01b03808216600090815260146020526040902060010154166117da5760405162461bcd60e51b815260206004820152600f60248201526e1d985d5b1d0b5b9bdd0b599bdd5b99608a1b6044820152606401610491565b6000816001600160a01b0316631f52692b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183e9190614582565b90506000826001600160a01b03166328a070256040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a691906145c8565b905080601760008282546118ba91906145b5565b909155506118ca9050828461371b565b50506118d66001600055565b50565b6118e16135ab565b600081116119315760405162461bcd60e51b815260206004820152601960248201527f6d61782d746f6b656e732d7065722d7661756c742d69732d30000000000000006044820152606401610491565b60045460408051918252602082018390527fcaf5778278cf2f59a6d497322a6e5685e22da86955a754ebb64f427f1c4f4a3b910160405180910390a1600455565b61197a6135ab565b6001600160a01b0382166119d05760405162461bcd60e51b815260206004820152600f60248201527f636f6c6c61746572616c2d69732d3000000000000000000000000000000000006044820152606401610491565b6001600160a01b0382166000818152600960209081526040918290205482519081529081018490527fd77d4caf1a3d54b0174aa0175ec5db7866556e06ae85f72cfc27becb1d39c381910160405180910390a26001600160a01b03909116600090815260096020526040902055565b600f546040517f1233d5f4000000000000000000000000000000000000000000000000000000008152600091339183916001600160a01b031690631233d5f490611a9190309086908990600401614734565b6020604051808303816000875af1158015611ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad49190614582565b9050611ae08282613799565b816001600160a01b0316816001600160a01b03167fd8e508729ff9830b43ef839ead95019f779b9b8ea6e4d30055512fb4ae58195986604051611b239190614769565b60405180910390a39392505050565b6001600160a01b0380821660009081526014602052604090206001015416611b8e5760405162461bcd60e51b815260206004820152600f60248201526e1d985d5b1d0b5b9bdd0b599bdd5b99608a1b6044820152606401610491565b611bb77f000000000000000000000000000000000000000000000000000000000000000061350d565b611c035760405162461bcd60e51b815260206004820152601860248201527f636f6c6c61746572616c2d6e6f742d737570706f7274656400000000000000006044820152606401610491565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600090815260166020526040812080543492839291611c4d90849061477c565b90915550506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166000908152600960209081526040808320546016909252909120541115611ce55760405162461bcd60e51b815260206004820152601660248201527f636f6c6c61746572616c2d6361702d72656163686564000000000000000000006044820152606401610491565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d4057600080fd5b505af1158015611d54573d6000803e3d6000fd5b50611d919350506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691503090508484613611565b6040516336badcf760e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201839052831690636d75b9ee90604401611640565b6064611dfb670de0b6b3a7640000600161478f565b611e0591906147a6565b81565b6001600160a01b0380841660009081526014602052604090206001015416611e645760405162461bcd60e51b815260206004820152600f60248201526e1d985d5b1d0b5b9bdd0b599bdd5b99608a1b6044820152606401610491565b611e6d8261350d565b611eb95760405162461bcd60e51b815260206004820152601860248201527f636f6c6c61746572616c2d6e6f742d737570706f7274656400000000000000006044820152606401610491565b6001600160a01b03821660009081526016602052604081208054839290611ee190849061477c565b90915550506001600160a01b0382166000908152600960209081526040808320546016909252909120541115611f595760405162461bcd60e51b815260206004820152601660248201527f636f6c6c61746572616c2d6361702d72656163686564000000000000000000006044820152606401610491565b611f6e6001600160a01b038316338584613611565b6040516336badcf760e11b81526001600160a01b03838116600483015260248201839052841690636d75b9ee90604401600060405180830381600087803b158015611fb857600080fd5b505af1158015611fcc573d6000803e3d6000fd5b50505050505050565b82336001600160a01b0316816001600160a01b0316631f52692b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561201e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120429190614582565b6001600160a01b031614806120e257506001600160a01b038116636d70f7ae336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156120be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e291906145e1565b61212e5760405162461bcd60e51b815260206004820152601c60248201527f6f6e6c792d7661756c742d6f776e65722d6f722d6f70657261746f72000000006044820152606401610491565b6001600160a01b038085166000908152601460205260409020600101541661218a5760405162461bcd60e51b815260206004820152600f60248201526e1d985d5b1d0b5b9bdd0b599bdd5b99608a1b6044820152606401610491565b6001600160a01b0382166121ca5760405162461bcd60e51b81526020600482015260076024820152660746f2d69732d360cc1b6044820152606401610491565b82601760008282546121dc919061477c565b909155506121eb905083613815565b6040517fc5ebeaec000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0385169063c5ebeaec90602401600060405180830381600087803b15801561224657600080fd5b505af115801561225a573d6000803e3d6000fd5b50506003546040517fd71275f60000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015260009450909116915063d71275f690602401602060405180830381865afa1580156122c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e891906145c8565b90506000670de0b6b3a76400006122ff838761478f565b61230991906147a6565b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166340c10f198561234584896145b5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156123a357600080fd5b505af11580156123b7573d6000803e3d6000fd5b50506007546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018590527f000000000000000000000000000000000000000000000000000000000000000090911692506340c10f199150604401600060405180830381600087803b15801561244357600080fd5b505af1158015612457573d6000803e3d6000fd5b50505050505050505050565b61246b6135ab565b61247560006138fa565b565b61247f6135ab565b6001600160a01b0381166124d55760405162461bcd60e51b815260206004820152600e60248201527f7072696365666565642d69732d300000000000000000000000000000000000006044820152606401610491565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fe5b20b8497e4f3e2435ef9c20e2e26b47497ee13745ce1c681ad6640653119e690600090a250565b6001600160a01b038116600090815260156020526040812061145d9061394c565b6125486135ab565b6001600160a01b03811661259e5760405162461bcd60e51b815260206004820152601d60248201527f726564656d7074696f6e2d6665652d726563697069656e742d69732d300000006044820152606401610491565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b83336001600160a01b0316816001600160a01b0316631f52692b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262d9190614582565b6001600160a01b0316146126765760405162461bcd60e51b815260206004820152601060248201526f37b7363c96bb30bab63a16b7bbb732b960811b6044820152606401610491565b6001600160a01b03808616600090815260146020526040902060010154166126d25760405162461bcd60e51b815260206004820152600f60248201526e1d985d5b1d0b5b9bdd0b599bdd5b99608a1b6044820152606401610491565b6126db8461350d565b6127275760405162461bcd60e51b815260206004820152601860248201527f636f6c6c61746572616c2d6e6f742d737570706f7274656400000000000000006044820152606401610491565b6001600160a01b0384166000908152601660205260408120805485929061274f9084906145b5565b9091555050604051633879b0c560e01b81526001600160a01b038581166004830152602482018590528381166044830152861690633879b0c590606401600060405180830381600087803b1580156127a657600080fd5b505af11580156127ba573d6000803e3d6000fd5b505050505050505050565b6127cd6135ab565b60065460408051918252602082018390527f7d8c8ed0e3c555998cab69931038b9fdb45b5aa9781c72eda38d58283817e165910160405180910390a1600655565b6128166135ab565b600c5460408051918252602082018390527f2064bbd23980e8daa68cdd49af066139432d778de4b015dd88a98ebdaa882060910160405180910390a1600c55565b6064611dfb670de0b6b3a7640000600561478f565b60026064612883670de0b6b3a7640000600161478f565b611dfb91906147a6565b60646128a2670de0b6b3a7640000600161478f565b6128ac91906147a6565b611e0590600a61478f565b6128bf6135ab565b600a5460408051918252602082018390527f30ed4a4a8845d4c122766feed8fe1fbc1ca7a25750ad51a5763d59179da8b5df910160405180910390a1600a55565b6129086135ab565b606461291d670de0b6b3a7640000600161478f565b61292791906147a6565b8111156129765760405162461bcd60e51b815260206004820152601860248201527f726564656d7074696f6e2d726174652d746f6f2d6869676800000000000000006044820152606401610491565b60055460408051918252602082018390527f5c7ab69b0f96f475a3e817a94ff5726fbdbd80972444269449645cd383d5e122910160405180910390a1600555565b80336001600160a01b0316816001600160a01b0316631f52692b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a249190614582565b6001600160a01b031614612a6d5760405162461bcd60e51b815260206004820152601060248201526f37b7363c96bb30bab63a16b7bbb732b960811b6044820152606401610491565b6001600160a01b0380831660009081526014602052604090206001015416612ac95760405162461bcd60e51b815260206004820152600f60248201526e1d985d5b1d0b5b9bdd0b599bdd5b99608a1b6044820152606401610491565b816001600160a01b0316630dca59c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2b91906145c8565b15612b785760405162461bcd60e51b815260206004820152600a60248201527f646562742d6e6f742d30000000000000000000000000000000000000000000006044820152606401610491565b816001600160a01b03166329ad2fb26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bda91906145c8565b15612c275760405162461bcd60e51b815260206004820152601060248201527f636f6c6c61746572616c2d6e6f742d30000000000000000000000000000000006044820152606401610491565b612c31338361371b565b5050565b612c3d6136c2565b6010546001600160a01b03163314612c975760405162461bcd60e51b815260206004820152601760248201527f6f6e6c792d6c69717569646174696f6e2d726f757465720000000000000000006044820152606401610491565b6001600160a01b0380831660009081526014602052604090206001015416612cf35760405162461bcd60e51b815260206004820152600f60248201526e1d985d5b1d0b5b9bdd0b599bdd5b99608a1b6044820152606401610491565b8060176000828254612d05919061477c565b90915550506040517f6b5bc994000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b03831690636b5bc99490602401600060405180830381600087803b158015612d6557600080fd5b505af1158015612d79573d6000803e3d6000fd5b50505050612c316001600055565b612d8f6135ab565b6001600160a01b038116612de55760405162461bcd60e51b815260206004820152601060248201527f626f72726f772d726174652d69732d30000000000000000000000000000000006044820152606401610491565b600354604080516001600160a01b03928316815291831660208301527f853cd4966a79d315d37b55e894f983b1b88af529ebcd5cedd9af2ec85f76e352910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b612e566136c2565b6001600160a01b0380851660009081526014602052604090206001015416612eb25760405162461bcd60e51b815260206004820152600f60248201526e1d985d5b1d0b5b9bdd0b599bdd5b99608a1b6044820152606401610491565b6001600160a01b038116612ef25760405162461bcd60e51b81526020600482015260076024820152660746f2d69732d360cc1b6044820152606401610491565b612efc84846110ee565b612f485760405162461bcd60e51b815260206004820152600e60248201527f6e6f742d72656465656d61626c650000000000000000000000000000000000006044820152606401610491565b6040517f1e9a69500000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490526000918291871690631e9a69509060440160408051808303816000875af1158015612fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd891906147c8565b915091508160176000828254612fee91906145b5565b90915550506001600160a01b0385166000908152601660205260408120805486929061301b9084906145b5565b9091555061306290503330613030848661477c565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190613611565b604051630852cd8d60e31b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b1580156130c457600080fd5b505af11580156130d8573d6000803e3d6000fd5b505060085460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018590527f0000000000000000000000000000000000000000000000000000000000000000909116925063a9059cbb91506044016020604051808303816000875af1158015613150573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317491906145e1565b506131896001600160a01b0386168486613956565b50506131956001600055565b50505050565b6131a36135ab565b6001600160a01b03811661321f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610491565b6118d6816138fa565b6132306135ab565b6001600160a01b0381166132865760405162461bcd60e51b815260206004820152601760248201527f6c69717569646174696f6e2d726f757465722d69732d300000000000000000006044820152606401610491565b601080546001600160a01b0319166001600160a01b0383169081179091556040517fdf69295b476b36b3b7c7c84e1673f901b426d42b283a85fce98bb99ba0323caf90600090a250565b600061145d8261350d565b81336001600160a01b0316816001600160a01b0316631f52692b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133489190614582565b6001600160a01b0316146133915760405162461bcd60e51b815260206004820152601060248201526f37b7363c96bb30bab63a16b7bbb732b960811b6044820152606401610491565b336001600160a01b0383166133e85760405162461bcd60e51b815260206004820152600e60248201527f6e65772d6f776e65722d69732d300000000000000000000000000000000000006044820152606401610491565b6001600160a01b03808516600090815260146020526040902060010154166134445760405162461bcd60e51b815260206004820152600f60248201526e1d985d5b1d0b5b9bdd0b599bdd5b99608a1b6044820152606401610491565b826001600160a01b0316816001600160a01b0316856001600160a01b03167fff056cfc1a0ac5c7b42c2095ad4902b58b2896a2cf3c3f782c7d0087430af37360405160405180910390a46040517fe071c0ca0000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015285169063e071c0ca90602401600060405180830381600087803b1580156134ea57600080fd5b505af11580156134fe573d6000803e3d6000fd5b50505050613195818486613986565b6002546040517f9878cbb30000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600092169082908290639878cbb390602401602060405180830381865afa158015613575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135999190614582565b6001600160a01b031614159392505050565b6001546001600160a01b031633146124755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610491565b60006114ce83836139cb565b6040516001600160a01b03808516602483015283166044820152606481018290526131959085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526139f5565b6002600054036137145760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610491565b6002600055565b613726601182613add565b6137725760405162461bcd60e51b815260206004820152601a60248201527f7661756c742d636f756c642d6e6f742d62652d72656d6f7665640000000000006044820152606401610491565b6001600160a01b03821660009081526015602052604090206137949082613ccc565b505050565b6137a7601182600080613ce1565b6137f35760405162461bcd60e51b815260206004820152601860248201527f7661756c742d636f756c642d6e6f742d62652d616464656400000000000000006044820152606401610491565b6001600160a01b0382166000908152601560205260409020613794908261402a565b600a5460175411156138695760405162461bcd60e51b815260206004820152601460248201527f646562742d6365696c696e672d726561636865640000000000000000000000006044820152606401610491565b600c54600d54613879919061477c565b42111561388e57600e81905542600d556138a6565b80600e60008282546138a0919061477c565b90915550505b600b54600e5411156118d65760405162461bcd60e51b815260206004820152601a60248201527f646562742d77696e646f772d616d6f756e742d726561636865640000000000006044820152606401610491565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061145d825490565b6040516001600160a01b03831660248201526044810182905261379490849063a9059cbb60e01b9060640161365e565b6001600160a01b03831660009081526015602052604090206139a89082613ccc565b506001600160a01b0382166000908152601560205260409020613195908261402a565b60008260000182815481106139e2576139e26146b5565b9060005260206000200154905092915050565b6000613a4a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661403f9092919063ffffffff16565b9050805160001480613a6b575080806020019051810190613a6b91906145e1565b6137945760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610491565b6001600160a01b038082166000908152600384016020908152604080832081518083019092528054851682526001015490931690830181905290919015613cc25783546001600160a01b038481169116148015613b49575060018401546001600160a01b038481169116145b15613b6e5783546001600160a01b031990811685556001850180549091169055613c6e565b60018401546001600160a01b0390811690841603613bcc576020808201516001600160a01b0316600081815260038701909252604090912080546001600160a01b031990811683179091556001860180549091169091179055613c6e565b83546001600160a01b0390811690841603613c2057805184546001600160a01b039091166001600160a01b031991821681178655600081815260038701602052604090206001018054909216179055613c6e565b60208082015182516001600160a01b0391821660008181526003890190945260408085208054949093166001600160a01b031994851681179093559184529220600101805490911690911790555b6001600160a01b0383166000908152600385016020526040902080546001600160a01b031990811682556001918201805490911690556002850154613cb391906145b5565b6002850155506001905061145d565b5060009392505050565b60006114ce836001600160a01b03841661404e565b60006001600160a01b0383161580613d1757506001600160a01b0383811660009081526003870160205260409020600101541615155b613d635760405162461bcd60e51b815260206004820152601f60248201527f3739643364205f726566206e6569746865722076616c6964206e6f72203078006044820152606401610491565b6001600160a01b0380851660009081526003870160205260409020805490911661401c5785546001600160a01b0316613dd65780546001600160a01b0386166001600160a01b03199182168117835560018084018054841683179055880180548316821790558754909116178655613ffd565b828015613e0357506001600160a01b0384161580613e03575060018601546001600160a01b038581169116145b15613e6157600180870180546001600160a01b03908116600081815260038b01602052604090208054928a166001600160a01b0319938416811790915585548316811786559385018054831690911790558154169091179055613ffd565b82158015613e8c57506001600160a01b0384161580613e8c575085546001600160a01b038581169116145b15613ee85785546001600160a01b0390811660008181526003890160205260409020600190810180546001600160a01b0319908116948a1694851790915584548116909217845583018054821683179055875416178655613ffd565b6001600160a01b038085166000908152600388016020908152604091829020825180840190935280548416835260010154909216918101919091528315613f9057805182546001600160a01b039182166001600160a01b0319918216178455600180850180548985169084168117909155600090815260038b01602052604080822080548c871690861681179091558651909516825290200180549091169091179055613ffb565b81546001600160a01b038087166001600160a01b031992831681178555602080850180516001808901805492871692881692909217909155600093845260038d01909252604080842090920180548c8616908716811790915590519093168252902080549092161790555b505b600286015461400d90600161477c565b60028701555060019050614022565b60009150505b949350505050565b60006114ce836001600160a01b038416614141565b60606140228484600085614190565b600081815260018301602052604081205480156141375760006140726001836145b5565b8554909150600090614086906001906145b5565b90508181146140eb5760008660000182815481106140a6576140a66146b5565b90600052602060002001549050808760000184815481106140c9576140c96146b5565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806140fc576140fc6147ec565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061145d565b600091505061145d565b60008181526001830160205260408120546141885750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561145d565b50600061145d565b6060824710156142085760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610491565b600080866001600160a01b031685876040516142249190614802565b60006040518083038185875af1925050503d8060008114614261576040519150601f19603f3d011682016040523d82523d6000602084013e614266565b606091505b509150915061427787838387614282565b979650505050505050565b606083156142f15782516000036142ea576001600160a01b0385163b6142ea5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610491565b5081614022565b61402283838151156143065781518083602001fd5b8060405162461bcd60e51b81526004016104919190614769565b6001600160a01b03811681146118d657600080fd5b60008060006060848603121561434a57600080fd5b833561435581614320565b925060208401359150604084013561436c81614320565b809150509250925092565b60006020828403121561438957600080fd5b81356114ce81614320565b600080604083850312156143a757600080fd5b82356143b281614320565b915060208301356143c281614320565b809150509250929050565b6000602082840312156143df57600080fd5b5035919050565b600080604083850312156143f957600080fd5b823561440481614320565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561445157614451614412565b604052919050565b6000602080838503121561446c57600080fd5b823567ffffffffffffffff8082111561448457600080fd5b818501915085601f83011261449857600080fd5b8135818111156144aa576144aa614412565b6144bc601f8201601f19168501614428565b915080825286848285010111156144d257600080fd5b8084840185840137600090820190930192909252509392505050565b60008060006060848603121561450357600080fd5b833561450e81614320565b9250602084013561451e81614320565b929592945050506040919091013590565b6000806000806080858703121561454557600080fd5b843561455081614320565b9350602085013561456081614320565b925060408501359150606085013561457781614320565b939692955090935050565b60006020828403121561459457600080fd5b81516114ce81614320565b634e487b7160e01b600052601160045260246000fd5b8181038181111561145d5761145d61459f565b6000602082840312156145da57600080fd5b5051919050565b6000602082840312156145f357600080fd5b815180151581146114ce57600080fd5b6000602080838503121561461657600080fd5b825167ffffffffffffffff8082111561462e57600080fd5b818501915085601f83011261464257600080fd5b81518181111561465457614654614412565b8060051b9150614665848301614428565b818152918301840191848101908884111561467f57600080fd5b938501935b838510156146a9578451925061469983614320565b8282529385019390850190614684565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016146dd576146dd61459f565b5060010190565b60005b838110156146ff5781810151838201526020016146e7565b50506000910152565b600081518084526147208160208601602086016146e4565b601f01601f19169290920160200192915050565b60006001600160a01b038086168352808516602084015250606060408301526147606060830184614708565b95945050505050565b6020815260006114ce6020830184614708565b8082018082111561145d5761145d61459f565b808202811582820484141761145d5761145d61459f565b6000826147c357634e487b7160e01b600052601260045260246000fd5b500490565b600080604083850312156147db57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603160045260246000fd5b600082516148148184602087016146e4565b919091019291505056fea26469706673582212201131ad7c4198c2e837b3a46949c75212f16ac85fad33b44c0caecff85e61897d64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "containsVault(address)": {
        "details": "returns and checks if such vault exists for this token"
      },
      "firstVault()": {
        "details": "returns the first vault by minimal collaterization ratio"
      },
      "lastVault()": {
        "details": "returns the last vault by maximum collaterization ratio"
      },
      "nextVault(address)": {
        "details": "returns the next vault by collaterization ratio"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "prevVault(address)": {
        "details": "returns the previous vault by collaterization ratio"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "vaultCount()": {
        "details": "returns the number of vaults for specific token"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isReedemable(address,address)": {
        "notice": "Collateral with higher MCR can be redeemed first"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 229,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 110,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10411,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10413,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "borrowRate",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10416,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "MAX_TOKENS_PER_VAULT",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10419,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "redemptionRate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10422,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "redemptionHealthFactorLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10424,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "borrowFeeRecipient",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10426,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "redemptionFeeRecipient",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10430,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "collateralCap",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10437,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "debtCeiling",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 10440,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "maxDebtPerWindow",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 10443,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "debtWindowSize",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 10445,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "lastDebtWindow",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 10447,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "debtWindowAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 10449,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "vaultDeployer",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 10451,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "liquidationRouter",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 11222,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "_vaults",
        "offset": 0,
        "slot": "17",
        "type": "t_struct(List)13629_storage"
      },
      {
        "astId": 11227,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "_vaultsByOwner",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_struct(AddressSet)2063_storage)"
      },
      {
        "astId": 9297,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "collateral",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9299,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "totalDebt",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(AddressSet)2063_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2063_storage"
      },
      "t_mapping(t_address,t_struct(EntryLink)13617_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LinkedAddressList.EntryLink)",
        "numberOfBytes": "32",
        "value": "t_struct(EntryLink)13617_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2063_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2062,
            "contract": "contracts/VaultFactory.sol:VaultFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1748_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(EntryLink)13617_storage": {
        "encoding": "inplace",
        "label": "struct LinkedAddressList.EntryLink",
        "members": [
          {
            "astId": 13614,
            "contract": "contracts/VaultFactory.sol:VaultFactory",
            "label": "prev",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13616,
            "contract": "contracts/VaultFactory.sol:VaultFactory",
            "label": "next",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(List)13629_storage": {
        "encoding": "inplace",
        "label": "struct LinkedAddressList.List",
        "members": [
          {
            "astId": 13619,
            "contract": "contracts/VaultFactory.sol:VaultFactory",
            "label": "_last",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13621,
            "contract": "contracts/VaultFactory.sol:VaultFactory",
            "label": "_first",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13623,
            "contract": "contracts/VaultFactory.sol:VaultFactory",
            "label": "_size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13628,
            "contract": "contracts/VaultFactory.sol:VaultFactory",
            "label": "_values",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(EntryLink)13617_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Set)1748_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1743,
            "contract": "contracts/VaultFactory.sol:VaultFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1747,
            "contract": "contracts/VaultFactory.sol:VaultFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}